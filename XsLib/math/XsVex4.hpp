struct vex4f {
	float x, y, z, w;
	vex4f();
	vex4f(float v1, float v2, float v3, float v4);
	vex4f(float v1, float v2, float v3);
	vex4f(float v1, float v2);
	vex4f(float v1);
	vex4f(bool& v1, bool& v2, bool& v3, bool& v4) { x = std::atof(v1); y = std::atof(v2); z = std::atof(v3); w = std::atof(v4); };
	vex4f(bool& v1, bool& v2, bool& v3) { x = std::atof(v1); y = std::atof(v2); z = std::atof(v3); };
	vex4f(bool& v1, bool& v2) { x = std::atof(v1); y = std::atof(v2); };
	vex4f(bool& v1) { x = std::atof(v1); y = std::atof(v1); z = std::atof(v1); w = std::atof(v1); };
	vex4f(std::string v1, std::string v2, std::string v3, std::string v4) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); z = std::atof(v3.c_str()); w = std::atof(v4.c_str()); };
	vex4f(std::string v1, std::string v2, std::string v3) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); z = std::atof(v3.c_str()); };
	vex4f(std::string v1, std::string v2) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); };
	vex4f(std::string v1) { x = std::atof(v1.c_str()); y = std::atof(v1.c_str());  z = std::atof(v1.c_str()); w = std::atof(v1.c_str()); };
	vex4f(vex2d v);
	vex4f(vex2i v);
	vex4f(vex2f v);
	vex4f(vex3d v);
	vex4f(vex3i v);
	vex4f(vex3f v);
	vex4f(vex4d v);
	vex4f(vex4i v);
	
#ifdef XS_USE_IMGUI
#endif

	vex4f(vex2f v, float v1);
	vex4f(vex2f v, float v1, float v2);
	vex4f(float v2, vex2f v, float v1);
	vex4f(float v1, float v2, vex2f v);
	vex4f(float v1, vex2f v);
	vex4f(vex2f v, vex2f v1);
	vex4f(vex2f v, double v1);
	vex4f(vex2f v, double v1, double v2);
	vex4f(double v2, vex2f v, double v1);
	vex4f(double v1, double v2, vex2f v);
	vex4f(double v1, vex2f v);
	vex4f(vex2f v, int v1);
	vex4f(vex2f v, int v1, int v2);
	vex4f(int v2, vex2f v, int v1);
	vex4f(int v1, int v2, vex2f v);
	vex4f(int v1, vex2f v);

	vex4f(vex2d v, float v1);
	vex4f(vex2d v, float v1, float v2);
	vex4f(float v2, vex2d v, float v1);
	vex4f(float v1, float v2, vex2d v);
	vex4f(float v1, vex2d v);
	vex4f(vex2d v, vex2d v1);
	vex4f(vex2d v, double v1);
	vex4f(vex2d v, double v1, double v2);
	vex4f(double v2, vex2d v, double v1);
	vex4f(double v1, double v2, vex2d v);
	vex4f(double v1, vex2d v);
	vex4f(vex2d v, int v1);
	vex4f(vex2d v, int v1, int v2);
	vex4f(int v2, vex2d v, int v1);
	vex4f(int v1, int v2, vex2d v);
	vex4f(int v1, vex2d v);

	vex4f(vex2i v, float v1);
	vex4f(vex2i v, float v1, float v2);
	vex4f(float v2, vex2i v, float v1);
	vex4f(float v1, float v2, vex2i v);
	vex4f(float v1, vex2i v);
	vex4f(vex2i v, vex2i v1);
	vex4f(vex2i v, double v1);
	vex4f(vex2i v, double v1, double v2);
	vex4f(double v2, vex2i v, double v1);
	vex4f(double v1, double v2, vex2i v);
	vex4f(double v1, vex2i v);
	vex4f(vex2i v, int v1);
	vex4f(vex2i v, int v1, int v2);
	vex4f(int v2, vex2i v, int v1);
	vex4f(int v1, int v2, vex2i v);
	vex4f(int v1, vex2i v);

	vex4f(vex3f v, float v1);
	vex4f(float v1, vex3f v);
	vex4f(vex3d v, float v1);
	vex4f(float v1, vex3d v);
	vex4f(vex3i v, float v1);
	vex4f(float v1, vex3i v);

	vex4f(vex3f v, double v1);
	vex4f(double v1, vex3f v);
	vex4f(vex3d v, double v1);
	vex4f(double v1, vex3d v);
	vex4f(vex3i v, double v1);
	vex4f(double v1, vex3i v);

	vex4f(vex3f v, int v1);
	vex4f(int v1, vex3f v);
	vex4f(vex3d v, int v1);
	vex4f(int v1, vex3d v);
	vex4f(vex3i v, int v1);
	vex4f(int v1, vex3i v);

	vex2f xx() { return vex2f(x, x); };
	vex2f xy() { return vex2f(x, y); };
	vex2f xz() { return vex2f(x, z); };
	vex2f xw() { return vex2f(x, w); };
	vex2f yx() { return vex2f(y, x); };
	vex2f yy() { return vex2f(y, y); };
	vex2f yz() { return vex2f(y, z); };
	vex2f yw() { return vex2f(y, w); };
	vex2f zx() { return vex2f(z, x); };
	vex2f zy() { return vex2f(z, y); };
	vex2f zz() { return vex2f(z, z); };
	vex2f zw() { return vex2f(z, w); };
	vex2f wx() { return vex2f(w, x); };
	vex2f wy() { return vex2f(w, y); };
	vex2f wz() { return vex2f(w, z); };
	vex2f ww() { return vex2f(w, w); };
	vex3f xxx() { return vex3f(x, x, x); };
	vex3f xxy() { return vex3f(x, x, y); };
	vex3f xxz() { return vex3f(x, x, z); };
	vex3f xxw() { return vex3f(x, x, w); };
	vex3f xyx() { return vex3f(x, y, x); };
	vex3f xyy() { return vex3f(x, y, y); };
	vex3f xyz() { return vex3f(x, y, z); };
	vex3f xyw() { return vex3f(x, y, w); };
	vex3f xzx() { return vex3f(x, z, x); };
	vex3f xzy() { return vex3f(x, z, y); };
	vex3f xzz() { return vex3f(x, z, z); };
	vex3f xzw() { return vex3f(x, z, w); };
	vex3f xwx() { return vex3f(x, w, x); };
	vex3f xwy() { return vex3f(x, w, y); };
	vex3f xwz() { return vex3f(x, w, z); };
	vex3f xww() { return vex3f(x, w, w); };
	vex3f yxx() { return vex3f(y, x, x); };
	vex3f yxy() { return vex3f(y, x, y); };
	vex3f yxz() { return vex3f(y, x, z); };
	vex3f yxw() { return vex3f(y, x, w); };
	vex3f yyx() { return vex3f(y, y, x); };
	vex3f yyy() { return vex3f(y, y, y); };
	vex3f yyz() { return vex3f(y, y, z); };
	vex3f yyw() { return vex3f(y, y, w); };
	vex3f yzx() { return vex3f(y, z, x); };
	vex3f yzy() { return vex3f(y, z, y); };
	vex3f yzz() { return vex3f(y, z, z); };
	vex3f yzw() { return vex3f(y, z, w); };
	vex3f ywx() { return vex3f(y, w, x); };
	vex3f ywy() { return vex3f(y, w, y); };
	vex3f ywz() { return vex3f(y, w, z); };
	vex3f yww() { return vex3f(y, w, w); };
	vex3f zxx() { return vex3f(z, x, x); };
	vex3f zxy() { return vex3f(z, x, y); };
	vex3f zxz() { return vex3f(z, x, z); };
	vex3f zxw() { return vex3f(z, x, w); };
	vex3f zyx() { return vex3f(z, y, x); };
	vex3f zyy() { return vex3f(z, y, y); };
	vex3f zyz() { return vex3f(z, y, z); };
	vex3f zyw() { return vex3f(z, y, w); };
	vex3f zzx() { return vex3f(z, z, x); };
	vex3f zzy() { return vex3f(z, z, y); };
	vex3f zzz() { return vex3f(z, z, z); };
	vex3f zzw() { return vex3f(z, z, w); };
	vex3f zwx() { return vex3f(z, w, x); };
	vex3f zwy() { return vex3f(z, w, y); };
	vex3f zwz() { return vex3f(z, w, z); };
	vex3f zww() { return vex3f(z, w, w); };
	vex3f wxx() { return vex3f(w, x, x); };
	vex3f wxy() { return vex3f(w, x, y); };
	vex3f wxz() { return vex3f(w, x, z); };
	vex3f wxw() { return vex3f(w, x, w); };
	vex3f wyx() { return vex3f(w, y, x); };
	vex3f wyy() { return vex3f(w, y, y); };
	vex3f wyz() { return vex3f(w, y, z); };
	vex3f wyw() { return vex3f(w, y, w); };
	vex3f wzx() { return vex3f(w, z, x); };
	vex3f wzy() { return vex3f(w, z, y); };
	vex3f wzz() { return vex3f(w, z, z); };
	vex3f wzw() { return vex3f(w, z, w); };
	vex3f wwx() { return vex3f(w, w, x); };
	vex3f wwy() { return vex3f(w, w, y); };
	vex3f wwz() { return vex3f(w, w, z); };
	vex3f www() { return vex3f(w, w, w); };
	vex4f xxxx() { return vex4f(x, x, x, x); };
	vex4f xxxy() { return vex4f(x, x, x, y); };
	vex4f xxxz() { return vex4f(x, x, x, z); };
	vex4f xxxw() { return vex4f(x, x, x, w); };
	vex4f xxyx() { return vex4f(x, x, y, x); };
	vex4f xxyy() { return vex4f(x, x, y, y); };
	vex4f xxyz() { return vex4f(x, x, y, z); };
	vex4f xxyw() { return vex4f(x, x, y, w); };
	vex4f xxzx() { return vex4f(x, x, z, x); };
	vex4f xxzy() { return vex4f(x, x, z, y); };
	vex4f xxzz() { return vex4f(x, x, z, z); };
	vex4f xxzw() { return vex4f(x, x, z, w); };
	vex4f xxwx() { return vex4f(x, x, w, x); };
	vex4f xxwy() { return vex4f(x, x, w, y); };
	vex4f xxwz() { return vex4f(x, x, w, z); };
	vex4f xxww() { return vex4f(x, x, w, w); };
	vex4f xyxx() { return vex4f(x, y, x, x); };
	vex4f xyxy() { return vex4f(x, y, x, y); };
	vex4f xyxz() { return vex4f(x, y, x, z); };
	vex4f xyxw() { return vex4f(x, y, x, w); };
	vex4f xyyx() { return vex4f(x, y, y, x); };
	vex4f xyyy() { return vex4f(x, y, y, y); };
	vex4f xyyz() { return vex4f(x, y, y, z); };
	vex4f xyyw() { return vex4f(x, y, y, w); };
	vex4f xyzx() { return vex4f(x, y, z, x); };
	vex4f xyzy() { return vex4f(x, y, z, y); };
	vex4f xyzz() { return vex4f(x, y, z, z); };
	vex4f xyzw() { return vex4f(x, y, z, w); };
	vex4f xywx() { return vex4f(x, y, w, x); };
	vex4f xywy() { return vex4f(x, y, w, y); };
	vex4f xywz() { return vex4f(x, y, w, z); };
	vex4f xyww() { return vex4f(x, y, w, w); };
	vex4f xzxx() { return vex4f(x, z, x, x); };
	vex4f xzxy() { return vex4f(x, z, x, y); };
	vex4f xzxz() { return vex4f(x, z, x, z); };
	vex4f xzxw() { return vex4f(x, z, x, w); };
	vex4f xzyx() { return vex4f(x, z, y, x); };
	vex4f xzyy() { return vex4f(x, z, y, y); };
	vex4f xzyz() { return vex4f(x, z, y, z); };
	vex4f xzyw() { return vex4f(x, z, y, w); };
	vex4f xzzx() { return vex4f(x, z, z, x); };
	vex4f xzzy() { return vex4f(x, z, z, y); };
	vex4f xzzz() { return vex4f(x, z, z, z); };
	vex4f xzzw() { return vex4f(x, z, z, w); };
	vex4f xzwx() { return vex4f(x, z, w, x); };
	vex4f xzwy() { return vex4f(x, z, w, y); };
	vex4f xzwz() { return vex4f(x, z, w, z); };
	vex4f xzww() { return vex4f(x, z, w, w); };
	vex4f xwxx() { return vex4f(x, w, x, x); };
	vex4f xwxy() { return vex4f(x, w, x, y); };
	vex4f xwxz() { return vex4f(x, w, x, z); };
	vex4f xwxw() { return vex4f(x, w, x, w); };
	vex4f xwyx() { return vex4f(x, w, y, x); };
	vex4f xwyy() { return vex4f(x, w, y, y); };
	vex4f xwyz() { return vex4f(x, w, y, z); };
	vex4f xwyw() { return vex4f(x, w, y, w); };
	vex4f xwzx() { return vex4f(x, w, z, x); };
	vex4f xwzy() { return vex4f(x, w, z, y); };
	vex4f xwzz() { return vex4f(x, w, z, z); };
	vex4f xwzw() { return vex4f(x, w, z, w); };
	vex4f xwwx() { return vex4f(x, w, w, x); };
	vex4f xwwy() { return vex4f(x, w, w, y); };
	vex4f xwwz() { return vex4f(x, w, w, z); };
	vex4f xwww() { return vex4f(x, w, w, w); };
	vex4f yxxx() { return vex4f(y, x, x, x); };
	vex4f yxxy() { return vex4f(y, x, x, y); };
	vex4f yxxz() { return vex4f(y, x, x, z); };
	vex4f yxxw() { return vex4f(y, x, x, w); };
	vex4f yxyx() { return vex4f(y, x, y, x); };
	vex4f yxyy() { return vex4f(y, x, y, y); };
	vex4f yxyz() { return vex4f(y, x, y, z); };
	vex4f yxyw() { return vex4f(y, x, y, w); };
	vex4f yxzx() { return vex4f(y, x, z, x); };
	vex4f yxzy() { return vex4f(y, x, z, y); };
	vex4f yxzz() { return vex4f(y, x, z, z); };
	vex4f yxzw() { return vex4f(y, x, z, w); };
	vex4f yxwx() { return vex4f(y, x, w, x); };
	vex4f yxwy() { return vex4f(y, x, w, y); };
	vex4f yxwz() { return vex4f(y, x, w, z); };
	vex4f yxww() { return vex4f(y, x, w, w); };
	vex4f yyxx() { return vex4f(y, y, x, x); };
	vex4f yyxy() { return vex4f(y, y, x, y); };
	vex4f yyxz() { return vex4f(y, y, x, z); };
	vex4f yyxw() { return vex4f(y, y, x, w); };
	vex4f yyyx() { return vex4f(y, y, y, x); };
	vex4f yyyy() { return vex4f(y, y, y, y); };
	vex4f yyyz() { return vex4f(y, y, y, z); };
	vex4f yyyw() { return vex4f(y, y, y, w); };
	vex4f yyzx() { return vex4f(y, y, z, x); };
	vex4f yyzy() { return vex4f(y, y, z, y); };
	vex4f yyzz() { return vex4f(y, y, z, z); };
	vex4f yyzw() { return vex4f(y, y, z, w); };
	vex4f yywx() { return vex4f(y, y, w, x); };
	vex4f yywy() { return vex4f(y, y, w, y); };
	vex4f yywz() { return vex4f(y, y, w, z); };
	vex4f yyww() { return vex4f(y, y, w, w); };
	vex4f yzxx() { return vex4f(y, z, x, x); };
	vex4f yzxy() { return vex4f(y, z, x, y); };
	vex4f yzxz() { return vex4f(y, z, x, z); };
	vex4f yzxw() { return vex4f(y, z, x, w); };
	vex4f yzyx() { return vex4f(y, z, y, x); };
	vex4f yzyy() { return vex4f(y, z, y, y); };
	vex4f yzyz() { return vex4f(y, z, y, z); };
	vex4f yzyw() { return vex4f(y, z, y, w); };
	vex4f yzzx() { return vex4f(y, z, z, x); };
	vex4f yzzy() { return vex4f(y, z, z, y); };
	vex4f yzzz() { return vex4f(y, z, z, z); };
	vex4f yzzw() { return vex4f(y, z, z, w); };
	vex4f yzwx() { return vex4f(y, z, w, x); };
	vex4f yzwy() { return vex4f(y, z, w, y); };
	vex4f yzwz() { return vex4f(y, z, w, z); };
	vex4f yzww() { return vex4f(y, z, w, w); };
	vex4f ywxx() { return vex4f(y, w, x, x); };
	vex4f ywxy() { return vex4f(y, w, x, y); };
	vex4f ywxz() { return vex4f(y, w, x, z); };
	vex4f ywxw() { return vex4f(y, w, x, w); };
	vex4f ywyx() { return vex4f(y, w, y, x); };
	vex4f ywyy() { return vex4f(y, w, y, y); };
	vex4f ywyz() { return vex4f(y, w, y, z); };
	vex4f ywyw() { return vex4f(y, w, y, w); };
	vex4f ywzx() { return vex4f(y, w, z, x); };
	vex4f ywzy() { return vex4f(y, w, z, y); };
	vex4f ywzz() { return vex4f(y, w, z, z); };
	vex4f ywzw() { return vex4f(y, w, z, w); };
	vex4f ywwx() { return vex4f(y, w, w, x); };
	vex4f ywwy() { return vex4f(y, w, w, y); };
	vex4f ywwz() { return vex4f(y, w, w, z); };
	vex4f ywww() { return vex4f(y, w, w, w); };
	vex4f zxxx() { return vex4f(z, x, x, x); };
	vex4f zxxy() { return vex4f(z, x, x, y); };
	vex4f zxxz() { return vex4f(z, x, x, z); };
	vex4f zxxw() { return vex4f(z, x, x, w); };
	vex4f zxyx() { return vex4f(z, x, y, x); };
	vex4f zxyy() { return vex4f(z, x, y, y); };
	vex4f zxyz() { return vex4f(z, x, y, z); };
	vex4f zxyw() { return vex4f(z, x, y, w); };
	vex4f zxzx() { return vex4f(z, x, z, x); };
	vex4f zxzy() { return vex4f(z, x, z, y); };
	vex4f zxzz() { return vex4f(z, x, z, z); };
	vex4f zxzw() { return vex4f(z, x, z, w); };
	vex4f zxwx() { return vex4f(z, x, w, x); };
	vex4f zxwy() { return vex4f(z, x, w, y); };
	vex4f zxwz() { return vex4f(z, x, w, z); };
	vex4f zxww() { return vex4f(z, x, w, w); };
	vex4f zyxx() { return vex4f(z, y, x, x); };
	vex4f zyxy() { return vex4f(z, y, x, y); };
	vex4f zyxz() { return vex4f(z, y, x, z); };
	vex4f zyxw() { return vex4f(z, y, x, w); };
	vex4f zyyx() { return vex4f(z, y, y, x); };
	vex4f zyyy() { return vex4f(z, y, y, y); };
	vex4f zyyz() { return vex4f(z, y, y, z); };
	vex4f zyyw() { return vex4f(z, y, y, w); };
	vex4f zyzx() { return vex4f(z, y, z, x); };
	vex4f zyzy() { return vex4f(z, y, z, y); };
	vex4f zyzz() { return vex4f(z, y, z, z); };
	vex4f zyzw() { return vex4f(z, y, z, w); };
	vex4f zywx() { return vex4f(z, y, w, x); };
	vex4f zywy() { return vex4f(z, y, w, y); };
	vex4f zywz() { return vex4f(z, y, w, z); };
	vex4f zyww() { return vex4f(z, y, w, w); };
	vex4f zzxx() { return vex4f(z, z, x, x); };
	vex4f zzxy() { return vex4f(z, z, x, y); };
	vex4f zzxz() { return vex4f(z, z, x, z); };
	vex4f zzxw() { return vex4f(z, z, x, w); };
	vex4f zzyx() { return vex4f(z, z, y, x); };
	vex4f zzyy() { return vex4f(z, z, y, y); };
	vex4f zzyz() { return vex4f(z, z, y, z); };
	vex4f zzyw() { return vex4f(z, z, y, w); };
	vex4f zzzx() { return vex4f(z, z, z, x); };
	vex4f zzzy() { return vex4f(z, z, z, y); };
	vex4f zzzz() { return vex4f(z, z, z, z); };
	vex4f zzzw() { return vex4f(z, z, z, w); };
	vex4f zzwx() { return vex4f(z, z, w, x); };
	vex4f zzwy() { return vex4f(z, z, w, y); };
	vex4f zzwz() { return vex4f(z, z, w, z); };
	vex4f zzww() { return vex4f(z, z, w, w); };
	vex4f zwxx() { return vex4f(z, w, x, x); };
	vex4f zwxy() { return vex4f(z, w, x, y); };
	vex4f zwxz() { return vex4f(z, w, x, z); };
	vex4f zwxw() { return vex4f(z, w, x, w); };
	vex4f zwyx() { return vex4f(z, w, y, x); };
	vex4f zwyy() { return vex4f(z, w, y, y); };
	vex4f zwyz() { return vex4f(z, w, y, z); };
	vex4f zwyw() { return vex4f(z, w, y, w); };
	vex4f zwzx() { return vex4f(z, w, z, x); };
	vex4f zwzy() { return vex4f(z, w, z, y); };
	vex4f zwzz() { return vex4f(z, w, z, z); };
	vex4f zwzw() { return vex4f(z, w, z, w); };
	vex4f zwwx() { return vex4f(z, w, w, x); };
	vex4f zwwy() { return vex4f(z, w, w, y); };
	vex4f zwwz() { return vex4f(z, w, w, z); };
	vex4f zwww() { return vex4f(z, w, w, w); };
	vex4f wxxx() { return vex4f(w, x, x, x); };
	vex4f wxxy() { return vex4f(w, x, x, y); };
	vex4f wxxz() { return vex4f(w, x, x, z); };
	vex4f wxxw() { return vex4f(w, x, x, w); };
	vex4f wxyx() { return vex4f(w, x, y, x); };
	vex4f wxyy() { return vex4f(w, x, y, y); };
	vex4f wxyz() { return vex4f(w, x, y, z); };
	vex4f wxyw() { return vex4f(w, x, y, w); };
	vex4f wxzx() { return vex4f(w, x, z, x); };
	vex4f wxzy() { return vex4f(w, x, z, y); };
	vex4f wxzz() { return vex4f(w, x, z, z); };
	vex4f wxzw() { return vex4f(w, x, z, w); };
	vex4f wxwx() { return vex4f(w, x, w, x); };
	vex4f wxwy() { return vex4f(w, x, w, y); };
	vex4f wxwz() { return vex4f(w, x, w, z); };
	vex4f wxww() { return vex4f(w, x, w, w); };
	vex4f wyxx() { return vex4f(w, y, x, x); };
	vex4f wyxy() { return vex4f(w, y, x, y); };
	vex4f wyxz() { return vex4f(w, y, x, z); };
	vex4f wyxw() { return vex4f(w, y, x, w); };
	vex4f wyyx() { return vex4f(w, y, y, x); };
	vex4f wyyy() { return vex4f(w, y, y, y); };
	vex4f wyyz() { return vex4f(w, y, y, z); };
	vex4f wyyw() { return vex4f(w, y, y, w); };
	vex4f wyzx() { return vex4f(w, y, z, x); };
	vex4f wyzy() { return vex4f(w, y, z, y); };
	vex4f wyzz() { return vex4f(w, y, z, z); };
	vex4f wyzw() { return vex4f(w, y, z, w); };
	vex4f wywx() { return vex4f(w, y, w, x); };
	vex4f wywy() { return vex4f(w, y, w, y); };
	vex4f wywz() { return vex4f(w, y, w, z); };
	vex4f wyww() { return vex4f(w, y, w, w); };
	vex4f wzxx() { return vex4f(w, z, x, x); };
	vex4f wzxy() { return vex4f(w, z, x, y); };
	vex4f wzxz() { return vex4f(w, z, x, z); };
	vex4f wzxw() { return vex4f(w, z, x, w); };
	vex4f wzyx() { return vex4f(w, z, y, x); };
	vex4f wzyy() { return vex4f(w, z, y, y); };
	vex4f wzyz() { return vex4f(w, z, y, z); };
	vex4f wzyw() { return vex4f(w, z, y, w); };
	vex4f wzzx() { return vex4f(w, z, z, x); };
	vex4f wzzy() { return vex4f(w, z, z, y); };
	vex4f wzzz() { return vex4f(w, z, z, z); };
	vex4f wzzw() { return vex4f(w, z, z, w); };
	vex4f wzwx() { return vex4f(w, z, w, x); };
	vex4f wzwy() { return vex4f(w, z, w, y); };
	vex4f wzwz() { return vex4f(w, z, w, z); };
	vex4f wzww() { return vex4f(w, z, w, w); };
	vex4f wwxx() { return vex4f(w, w, x, x); };
	vex4f wwxy() { return vex4f(w, w, x, y); };
	vex4f wwxz() { return vex4f(w, w, x, z); };
	vex4f wwxw() { return vex4f(w, w, x, w); };
	vex4f wwyx() { return vex4f(w, w, y, x); };
	vex4f wwyy() { return vex4f(w, w, y, y); };
	vex4f wwyz() { return vex4f(w, w, y, z); };
	vex4f wwyw() { return vex4f(w, w, y, w); };
	vex4f wwzx() { return vex4f(w, w, z, x); };
	vex4f wwzy() { return vex4f(w, w, z, y); };
	vex4f wwzz() { return vex4f(w, w, z, z); };
	vex4f wwzw() { return vex4f(w, w, z, w); };
	vex4f wwwx() { return vex4f(w, w, w, x); };
	vex4f wwwy() { return vex4f(w, w, w, y); };
	vex4f wwwz() { return vex4f(w, w, w, z); };
	vex4f wwww() { return vex4f(w, w, w, w); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex4f operator()(const char* v) {
		if (strlen(v) == 2)
			return vex4f(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y);
		else if (strlen(v) == 3)
			return vex4f(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y);
		else
			return vex4f(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y, v[3] == 'x' ? x : y);
	};

	float& operator[](int v);
	float& operator[](std::string v);
	vex4f operator!();
	vex4f operator%(std::string v);
	vex4f operator%(int v);
	vex4f operator%(float v);
	vex4f operator%(vex2f v);
	vex4f operator%(vex2d v);
	vex4f operator%(vex2i v);
	vex4f operator%(vex3f v);
	vex4f operator%(vex3d v);
	vex4f operator%(vex3i v);
	vex4f operator%(vex4f v);
	vex4f operator%(vex4d v);
	vex4f operator%(vex4i v);


	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(float v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4d v);
	void operator%=(vex4f v);
	void operator%=(vex4i v);

	vex4f operator|(vex4f v);
	vex4f operator|(vex2d v);
	vex4f operator|(vex2i v);
	vex4f operator|(vex2f v);
	vex4f operator|(vex3d v);
	vex4f operator|(vex3i v);
	vex4f operator|(vex3f v);
	vex4f operator|(vex4d v);
	vex4f operator|(vex4i v);

	void operator|=(vex2f v);
	void operator|=(vex2d v);
	void operator|=(vex2i v);
	void operator|=(vex3f v);
	void operator|=(vex3d v);
	void operator|=(vex3i v);
	void operator|=(vex4f v);
	void operator|=(vex4d v);
	void operator|=(vex4i v);

	void operator= (vex2d v);
	void operator= (vex2i v);
	void operator= (vex2f v);
	void operator= (vex3d v);
	void operator= (vex3i v);
	void operator= (vex3f v);
	void operator= (vex4d v);
	void operator= (vex4i v);

	vex4f operator+ (vex4f v);
	vex4f operator- (vex4f v);
	vex4f operator* (vex4f v);
	vex4f operator/ (vex4f v);

	vex4f operator+ (vex4d v);
	vex4f operator- (vex4d v);
	vex4f operator* (vex4d v);
	vex4f operator/ (vex4d v);

	vex4f operator+ (vex4i v);
	vex4f operator- (vex4i v);
	vex4f operator* (vex4i v);
	vex4f operator/ (vex4i v);

	vex4f operator+ (vex3f v);
	vex4f operator- (vex3f v);
	vex4f operator* (vex3f v);
	vex4f operator/ (vex3f v);

	vex4f operator+ (vex3i v);
	vex4f operator- (vex3i v);
	vex4f operator* (vex3i v);
	vex4f operator/ (vex3i v);

	vex4f operator+ (vex3d v);
	vex4f operator- (vex3d v);
	vex4f operator* (vex3d v);
	vex4f operator/ (vex3d v);

	vex4f operator+ (vex2f v);
	vex4f operator- (vex2f v);
	vex4f operator* (vex2f v);
	vex4f operator/ (vex2f v);

	vex4f operator+ (vex2i v);
	vex4f operator- (vex2i v);
	vex4f operator* (vex2i v);
	vex4f operator/ (vex2i v);

	vex4f operator+ (vex2d v);
	vex4f operator- (vex2d v);
	vex4f operator* (vex2d v);
	vex4f operator/ (vex2d v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	vex4f operator+ (float v);
	vex4f operator- (float v);
	vex4f operator* (float v);
	vex4f operator/ (float v);
	void operator= (float v);

	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (float v) { x += v; y += v; z += v; w += v; };
	void operator-= (float v) { x -= v; y -= v; z -= v; w -= v; };
	void operator*= (float v) { x *= v; y *= v; z *= v; w *= v; };
	void operator/= (float v) { x /= v; y /= v; z /= v; w /= v; };
	void operator++ () { x += 1.0f; y += 1.0f; };
	void operator-- () { x -= 1.0f; y -= 1.0f; };

	bool operator== (vex4f v);
	bool operator== (float v);
	bool operator!= (vex4f v);
	bool operator!= (float v);
	bool operator< (vex4f v);
	bool operator< (float v);
	bool operator<= (vex4f v);
	bool operator<= (float v);
	bool operator> (vex4f v);
	bool operator> (float v);
	bool operator>= (vex4f v);
	bool operator>= (float v);

	void normalize();
	void ceil_();
	void floor_();
	void abs_();
	void sqrt_();
	void percent_(float v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex4f v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void round_();
	void trunc_();
	void exp_();
	void cbrt_();

	vex4f ceil();
	vex4f floor();
	vex4f abs();
	vex4f sqrt();
	vex4f percent(float v);
	vex4f pow(int v);
	vex4f rand(int v2, int v3);
	vex4f atan2(vex4f v);
	vex4f atan();
	vex4f asin();
	vex4f acos();
	vex4f tan();
	vex4f sin();
	vex4f cos();
	vex4f average();
	vex4f log();
	vex4f round();
	vex4f trunc();
	vex4f exp();
	vex4f cbrt();

	bool isEmpty();
};
// //////////////////////// //
struct vex4d {
	double x, y, z, w;
	vex4d();
	vex4d(double v1, double v2, double v3, double v4);
	vex4d(double v1, double v2, double v3);
	vex4d(double v1, double v2);
	vex4d(double v1);
	vex4d(bool& v1, bool& v2, bool& v3, bool& v4) { x = std::atof(v1); y = std::atof(v2); z = std::atof(v3); w = std::atof(v4); };
	vex4d(bool& v1, bool& v2, bool& v3) { x = std::atof(v1); y = std::atof(v2); z = std::atof(v3); };
	vex4d(bool& v1, bool& v2) { x = std::atof(v1); y = std::atof(v2); };
	vex4d(bool& v1) { x = std::atof(v1); y = std::atof(v1); z = std::atof(v1); w = std::atof(v1); };
	vex4d(std::string v1, std::string v2, std::string v3, std::string v4) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); z = std::atof(v3.c_str()); w = std::atof(v4.c_str()); };
	vex4d(std::string v1, std::string v2, std::string v3) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); z = std::atof(v3.c_str()); };
	vex4d(std::string v1, std::string v2) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); };
	vex4d(std::string v1) { x = std::atof(v1.c_str()); y = std::atof(v1.c_str());  z = std::atof(v1.c_str()); w = std::atof(v1.c_str()); };
	vex4d(vex2d v);
	vex4d(vex2i v);
	vex4d(vex2f v);
	vex4d(vex3d v);
	vex4d(vex3i v);
	vex4d(vex3f v);
	vex4d(vex4f v);
	vex4d(vex4i v);

	vex4d(vex2f v, float v1);
	vex4d(vex2f v, float v1, float v2);
	vex4d(float v2, vex2f v, float v1);
	vex4d(float v1, float v2, vex2f v);
	vex4d(float v1, vex2f v);
	vex4d(vex2f v, vex2f v1);
	vex4d(vex2f v, double v1);
	vex4d(vex2f v, double v1, double v2);
	vex4d(double v2, vex2f v, double v1);
	vex4d(double v1, double v2, vex2f v);
	vex4d(double v1, vex2f v);
	vex4d(vex2f v, int v1);
	vex4d(vex2f v, int v1, int v2);
	vex4d(int v2, vex2f v, int v1);
	vex4d(int v1, int v2, vex2f v);
	vex4d(int v1, vex2f v);

	vex4d(vex2d v, float v1);
	vex4d(vex2d v, float v1, float v2);
	vex4d(float v2, vex2d v, float v1);
	vex4d(float v1, float v2, vex2d v);
	vex4d(float v1, vex2d v);
	vex4d(vex2d v, vex2d v1);
	vex4d(vex2d v, double v1);
	vex4d(vex2d v, double v1, double v2);
	vex4d(double v2, vex2d v, double v1);
	vex4d(double v1, double v2, vex2d v);
	vex4d(double v1, vex2d v);
	vex4d(vex2d v, int v1);
	vex4d(vex2d v, int v1, int v2);
	vex4d(int v2, vex2d v, int v1);
	vex4d(int v1, int v2, vex2d v);
	vex4d(int v1, vex2d v);

	vex4d(vex2i v, float v1);
	vex4d(vex2i v, float v1, float v2);
	vex4d(float v2, vex2i v, float v1);
	vex4d(float v1, float v2, vex2i v);
	vex4d(float v1, vex2i v);
	vex4d(vex2i v, vex2i v1);
	vex4d(vex2i v, double v1);
	vex4d(vex2i v, double v1, double v2);
	vex4d(double v2, vex2i v, double v1);
	vex4d(double v1, double v2, vex2i v);
	vex4d(double v1, vex2i v);
	vex4d(vex2i v, int v1);
	vex4d(vex2i v, int v1, int v2);
	vex4d(int v2, vex2i v, int v1);
	vex4d(int v1, int v2, vex2i v);
	vex4d(int v1, vex2i v);

	vex4d(vex3f v, float v1);
	vex4d(float v1, vex3f v);
	vex4d(vex3d v, float v1);
	vex4d(float v1, vex3d v);
	vex4d(vex3i v, float v1);
	vex4d(float v1, vex3i v);

	vex4d(vex3f v, double v1);
	vex4d(double v1, vex3f v);
	vex4d(vex3d v, double v1);
	vex4d(double v1, vex3d v);
	vex4d(vex3i v, double v1);
	vex4d(double v1, vex3i v);

	vex4d(vex3f v, int v1);
	vex4d(int v1, vex3f v);
	vex4d(vex3d v, int v1);
	vex4d(int v1, vex3d v);
	vex4d(vex3i v, int v1);
	vex4d(int v1, vex3i v);

	vex2d xx() { return vex2d(x, x); };
	vex2d xy() { return vex2d(x, y); };
	vex2d xz() { return vex2d(x, z); };
	vex2d xw() { return vex2d(x, w); };
	vex2d yx() { return vex2d(y, x); };
	vex2d yy() { return vex2d(y, y); };
	vex2d yz() { return vex2d(y, z); };
	vex2d yw() { return vex2d(y, w); };
	vex2d zx() { return vex2d(z, x); };
	vex2d zy() { return vex2d(z, y); };
	vex2d zz() { return vex2d(z, z); };
	vex2d zw() { return vex2d(z, w); };
	vex2d wx() { return vex2d(w, x); };
	vex2d wy() { return vex2d(w, y); };
	vex2d wz() { return vex2d(w, z); };
	vex2d ww() { return vex2d(w, w); };
	vex3d xxx() { return vex3d(x, x, x); };
	vex3d xxy() { return vex3d(x, x, y); };
	vex3d xxz() { return vex3d(x, x, z); };
	vex3d xxw() { return vex3d(x, x, w); };
	vex3d xyx() { return vex3d(x, y, x); };
	vex3d xyy() { return vex3d(x, y, y); };
	vex3d xyz() { return vex3d(x, y, z); };
	vex3d xyw() { return vex3d(x, y, w); };
	vex3d xzx() { return vex3d(x, z, x); };
	vex3d xzy() { return vex3d(x, z, y); };
	vex3d xzz() { return vex3d(x, z, z); };
	vex3d xzw() { return vex3d(x, z, w); };
	vex3d xwx() { return vex3d(x, w, x); };
	vex3d xwy() { return vex3d(x, w, y); };
	vex3d xwz() { return vex3d(x, w, z); };
	vex3d xww() { return vex3d(x, w, w); };
	vex3d yxx() { return vex3d(y, x, x); };
	vex3d yxy() { return vex3d(y, x, y); };
	vex3d yxz() { return vex3d(y, x, z); };
	vex3d yxw() { return vex3d(y, x, w); };
	vex3d yyx() { return vex3d(y, y, x); };
	vex3d yyy() { return vex3d(y, y, y); };
	vex3d yyz() { return vex3d(y, y, z); };
	vex3d yyw() { return vex3d(y, y, w); };
	vex3d yzx() { return vex3d(y, z, x); };
	vex3d yzy() { return vex3d(y, z, y); };
	vex3d yzz() { return vex3d(y, z, z); };
	vex3d yzw() { return vex3d(y, z, w); };
	vex3d ywx() { return vex3d(y, w, x); };
	vex3d ywy() { return vex3d(y, w, y); };
	vex3d ywz() { return vex3d(y, w, z); };
	vex3d yww() { return vex3d(y, w, w); };
	vex3d zxx() { return vex3d(z, x, x); };
	vex3d zxy() { return vex3d(z, x, y); };
	vex3d zxz() { return vex3d(z, x, z); };
	vex3d zxw() { return vex3d(z, x, w); };
	vex3d zyx() { return vex3d(z, y, x); };
	vex3d zyy() { return vex3d(z, y, y); };
	vex3d zyz() { return vex3d(z, y, z); };
	vex3d zyw() { return vex3d(z, y, w); };
	vex3d zzx() { return vex3d(z, z, x); };
	vex3d zzy() { return vex3d(z, z, y); };
	vex3d zzz() { return vex3d(z, z, z); };
	vex3d zzw() { return vex3d(z, z, w); };
	vex3d zwx() { return vex3d(z, w, x); };
	vex3d zwy() { return vex3d(z, w, y); };
	vex3d zwz() { return vex3d(z, w, z); };
	vex3d zww() { return vex3d(z, w, w); };
	vex3d wxx() { return vex3d(w, x, x); };
	vex3d wxy() { return vex3d(w, x, y); };
	vex3d wxz() { return vex3d(w, x, z); };
	vex3d wxw() { return vex3d(w, x, w); };
	vex3d wyx() { return vex3d(w, y, x); };
	vex3d wyy() { return vex3d(w, y, y); };
	vex3d wyz() { return vex3d(w, y, z); };
	vex3d wyw() { return vex3d(w, y, w); };
	vex3d wzx() { return vex3d(w, z, x); };
	vex3d wzy() { return vex3d(w, z, y); };
	vex3d wzz() { return vex3d(w, z, z); };
	vex3d wzw() { return vex3d(w, z, w); };
	vex3d wwx() { return vex3d(w, w, x); };
	vex3d wwy() { return vex3d(w, w, y); };
	vex3d wwz() { return vex3d(w, w, z); };
	vex3d www() { return vex3d(w, w, w); };
	vex4d xxxx() { return vex4d(x, x, x, x); };
	vex4d xxxy() { return vex4d(x, x, x, y); };
	vex4d xxxz() { return vex4d(x, x, x, z); };
	vex4d xxxw() { return vex4d(x, x, x, w); };
	vex4d xxyx() { return vex4d(x, x, y, x); };
	vex4d xxyy() { return vex4d(x, x, y, y); };
	vex4d xxyz() { return vex4d(x, x, y, z); };
	vex4d xxyw() { return vex4d(x, x, y, w); };
	vex4d xxzx() { return vex4d(x, x, z, x); };
	vex4d xxzy() { return vex4d(x, x, z, y); };
	vex4d xxzz() { return vex4d(x, x, z, z); };
	vex4d xxzw() { return vex4d(x, x, z, w); };
	vex4d xxwx() { return vex4d(x, x, w, x); };
	vex4d xxwy() { return vex4d(x, x, w, y); };
	vex4d xxwz() { return vex4d(x, x, w, z); };
	vex4d xxww() { return vex4d(x, x, w, w); };
	vex4d xyxx() { return vex4d(x, y, x, x); };
	vex4d xyxy() { return vex4d(x, y, x, y); };
	vex4d xyxz() { return vex4d(x, y, x, z); };
	vex4d xyxw() { return vex4d(x, y, x, w); };
	vex4d xyyx() { return vex4d(x, y, y, x); };
	vex4d xyyy() { return vex4d(x, y, y, y); };
	vex4d xyyz() { return vex4d(x, y, y, z); };
	vex4d xyyw() { return vex4d(x, y, y, w); };
	vex4d xyzx() { return vex4d(x, y, z, x); };
	vex4d xyzy() { return vex4d(x, y, z, y); };
	vex4d xyzz() { return vex4d(x, y, z, z); };
	vex4d xyzw() { return vex4d(x, y, z, w); };
	vex4d xywx() { return vex4d(x, y, w, x); };
	vex4d xywy() { return vex4d(x, y, w, y); };
	vex4d xywz() { return vex4d(x, y, w, z); };
	vex4d xyww() { return vex4d(x, y, w, w); };
	vex4d xzxx() { return vex4d(x, z, x, x); };
	vex4d xzxy() { return vex4d(x, z, x, y); };
	vex4d xzxz() { return vex4d(x, z, x, z); };
	vex4d xzxw() { return vex4d(x, z, x, w); };
	vex4d xzyx() { return vex4d(x, z, y, x); };
	vex4d xzyy() { return vex4d(x, z, y, y); };
	vex4d xzyz() { return vex4d(x, z, y, z); };
	vex4d xzyw() { return vex4d(x, z, y, w); };
	vex4d xzzx() { return vex4d(x, z, z, x); };
	vex4d xzzy() { return vex4d(x, z, z, y); };
	vex4d xzzz() { return vex4d(x, z, z, z); };
	vex4d xzzw() { return vex4d(x, z, z, w); };
	vex4d xzwx() { return vex4d(x, z, w, x); };
	vex4d xzwy() { return vex4d(x, z, w, y); };
	vex4d xzwz() { return vex4d(x, z, w, z); };
	vex4d xzww() { return vex4d(x, z, w, w); };
	vex4d xwxx() { return vex4d(x, w, x, x); };
	vex4d xwxy() { return vex4d(x, w, x, y); };
	vex4d xwxz() { return vex4d(x, w, x, z); };
	vex4d xwxw() { return vex4d(x, w, x, w); };
	vex4d xwyx() { return vex4d(x, w, y, x); };
	vex4d xwyy() { return vex4d(x, w, y, y); };
	vex4d xwyz() { return vex4d(x, w, y, z); };
	vex4d xwyw() { return vex4d(x, w, y, w); };
	vex4d xwzx() { return vex4d(x, w, z, x); };
	vex4d xwzy() { return vex4d(x, w, z, y); };
	vex4d xwzz() { return vex4d(x, w, z, z); };
	vex4d xwzw() { return vex4d(x, w, z, w); };
	vex4d xwwx() { return vex4d(x, w, w, x); };
	vex4d xwwy() { return vex4d(x, w, w, y); };
	vex4d xwwz() { return vex4d(x, w, w, z); };
	vex4d xwww() { return vex4d(x, w, w, w); };
	vex4d yxxx() { return vex4d(y, x, x, x); };
	vex4d yxxy() { return vex4d(y, x, x, y); };
	vex4d yxxz() { return vex4d(y, x, x, z); };
	vex4d yxxw() { return vex4d(y, x, x, w); };
	vex4d yxyx() { return vex4d(y, x, y, x); };
	vex4d yxyy() { return vex4d(y, x, y, y); };
	vex4d yxyz() { return vex4d(y, x, y, z); };
	vex4d yxyw() { return vex4d(y, x, y, w); };
	vex4d yxzx() { return vex4d(y, x, z, x); };
	vex4d yxzy() { return vex4d(y, x, z, y); };
	vex4d yxzz() { return vex4d(y, x, z, z); };
	vex4d yxzw() { return vex4d(y, x, z, w); };
	vex4d yxwx() { return vex4d(y, x, w, x); };
	vex4d yxwy() { return vex4d(y, x, w, y); };
	vex4d yxwz() { return vex4d(y, x, w, z); };
	vex4d yxww() { return vex4d(y, x, w, w); };
	vex4d yyxx() { return vex4d(y, y, x, x); };
	vex4d yyxy() { return vex4d(y, y, x, y); };
	vex4d yyxz() { return vex4d(y, y, x, z); };
	vex4d yyxw() { return vex4d(y, y, x, w); };
	vex4d yyyx() { return vex4d(y, y, y, x); };
	vex4d yyyy() { return vex4d(y, y, y, y); };
	vex4d yyyz() { return vex4d(y, y, y, z); };
	vex4d yyyw() { return vex4d(y, y, y, w); };
	vex4d yyzx() { return vex4d(y, y, z, x); };
	vex4d yyzy() { return vex4d(y, y, z, y); };
	vex4d yyzz() { return vex4d(y, y, z, z); };
	vex4d yyzw() { return vex4d(y, y, z, w); };
	vex4d yywx() { return vex4d(y, y, w, x); };
	vex4d yywy() { return vex4d(y, y, w, y); };
	vex4d yywz() { return vex4d(y, y, w, z); };
	vex4d yyww() { return vex4d(y, y, w, w); };
	vex4d yzxx() { return vex4d(y, z, x, x); };
	vex4d yzxy() { return vex4d(y, z, x, y); };
	vex4d yzxz() { return vex4d(y, z, x, z); };
	vex4d yzxw() { return vex4d(y, z, x, w); };
	vex4d yzyx() { return vex4d(y, z, y, x); };
	vex4d yzyy() { return vex4d(y, z, y, y); };
	vex4d yzyz() { return vex4d(y, z, y, z); };
	vex4d yzyw() { return vex4d(y, z, y, w); };
	vex4d yzzx() { return vex4d(y, z, z, x); };
	vex4d yzzy() { return vex4d(y, z, z, y); };
	vex4d yzzz() { return vex4d(y, z, z, z); };
	vex4d yzzw() { return vex4d(y, z, z, w); };
	vex4d yzwx() { return vex4d(y, z, w, x); };
	vex4d yzwy() { return vex4d(y, z, w, y); };
	vex4d yzwz() { return vex4d(y, z, w, z); };
	vex4d yzww() { return vex4d(y, z, w, w); };
	vex4d ywxx() { return vex4d(y, w, x, x); };
	vex4d ywxy() { return vex4d(y, w, x, y); };
	vex4d ywxz() { return vex4d(y, w, x, z); };
	vex4d ywxw() { return vex4d(y, w, x, w); };
	vex4d ywyx() { return vex4d(y, w, y, x); };
	vex4d ywyy() { return vex4d(y, w, y, y); };
	vex4d ywyz() { return vex4d(y, w, y, z); };
	vex4d ywyw() { return vex4d(y, w, y, w); };
	vex4d ywzx() { return vex4d(y, w, z, x); };
	vex4d ywzy() { return vex4d(y, w, z, y); };
	vex4d ywzz() { return vex4d(y, w, z, z); };
	vex4d ywzw() { return vex4d(y, w, z, w); };
	vex4d ywwx() { return vex4d(y, w, w, x); };
	vex4d ywwy() { return vex4d(y, w, w, y); };
	vex4d ywwz() { return vex4d(y, w, w, z); };
	vex4d ywww() { return vex4d(y, w, w, w); };
	vex4d zxxx() { return vex4d(z, x, x, x); };
	vex4d zxxy() { return vex4d(z, x, x, y); };
	vex4d zxxz() { return vex4d(z, x, x, z); };
	vex4d zxxw() { return vex4d(z, x, x, w); };
	vex4d zxyx() { return vex4d(z, x, y, x); };
	vex4d zxyy() { return vex4d(z, x, y, y); };
	vex4d zxyz() { return vex4d(z, x, y, z); };
	vex4d zxyw() { return vex4d(z, x, y, w); };
	vex4d zxzx() { return vex4d(z, x, z, x); };
	vex4d zxzy() { return vex4d(z, x, z, y); };
	vex4d zxzz() { return vex4d(z, x, z, z); };
	vex4d zxzw() { return vex4d(z, x, z, w); };
	vex4d zxwx() { return vex4d(z, x, w, x); };
	vex4d zxwy() { return vex4d(z, x, w, y); };
	vex4d zxwz() { return vex4d(z, x, w, z); };
	vex4d zxww() { return vex4d(z, x, w, w); };
	vex4d zyxx() { return vex4d(z, y, x, x); };
	vex4d zyxy() { return vex4d(z, y, x, y); };
	vex4d zyxz() { return vex4d(z, y, x, z); };
	vex4d zyxw() { return vex4d(z, y, x, w); };
	vex4d zyyx() { return vex4d(z, y, y, x); };
	vex4d zyyy() { return vex4d(z, y, y, y); };
	vex4d zyyz() { return vex4d(z, y, y, z); };
	vex4d zyyw() { return vex4d(z, y, y, w); };
	vex4d zyzx() { return vex4d(z, y, z, x); };
	vex4d zyzy() { return vex4d(z, y, z, y); };
	vex4d zyzz() { return vex4d(z, y, z, z); };
	vex4d zyzw() { return vex4d(z, y, z, w); };
	vex4d zywx() { return vex4d(z, y, w, x); };
	vex4d zywy() { return vex4d(z, y, w, y); };
	vex4d zywz() { return vex4d(z, y, w, z); };
	vex4d zyww() { return vex4d(z, y, w, w); };
	vex4d zzxx() { return vex4d(z, z, x, x); };
	vex4d zzxy() { return vex4d(z, z, x, y); };
	vex4d zzxz() { return vex4d(z, z, x, z); };
	vex4d zzxw() { return vex4d(z, z, x, w); };
	vex4d zzyx() { return vex4d(z, z, y, x); };
	vex4d zzyy() { return vex4d(z, z, y, y); };
	vex4d zzyz() { return vex4d(z, z, y, z); };
	vex4d zzyw() { return vex4d(z, z, y, w); };
	vex4d zzzx() { return vex4d(z, z, z, x); };
	vex4d zzzy() { return vex4d(z, z, z, y); };
	vex4d zzzz() { return vex4d(z, z, z, z); };
	vex4d zzzw() { return vex4d(z, z, z, w); };
	vex4d zzwx() { return vex4d(z, z, w, x); };
	vex4d zzwy() { return vex4d(z, z, w, y); };
	vex4d zzwz() { return vex4d(z, z, w, z); };
	vex4d zzww() { return vex4d(z, z, w, w); };
	vex4d zwxx() { return vex4d(z, w, x, x); };
	vex4d zwxy() { return vex4d(z, w, x, y); };
	vex4d zwxz() { return vex4d(z, w, x, z); };
	vex4d zwxw() { return vex4d(z, w, x, w); };
	vex4d zwyx() { return vex4d(z, w, y, x); };
	vex4d zwyy() { return vex4d(z, w, y, y); };
	vex4d zwyz() { return vex4d(z, w, y, z); };
	vex4d zwyw() { return vex4d(z, w, y, w); };
	vex4d zwzx() { return vex4d(z, w, z, x); };
	vex4d zwzy() { return vex4d(z, w, z, y); };
	vex4d zwzz() { return vex4d(z, w, z, z); };
	vex4d zwzw() { return vex4d(z, w, z, w); };
	vex4d zwwx() { return vex4d(z, w, w, x); };
	vex4d zwwy() { return vex4d(z, w, w, y); };
	vex4d zwwz() { return vex4d(z, w, w, z); };
	vex4d zwww() { return vex4d(z, w, w, w); };
	vex4d wxxx() { return vex4d(w, x, x, x); };
	vex4d wxxy() { return vex4d(w, x, x, y); };
	vex4d wxxz() { return vex4d(w, x, x, z); };
	vex4d wxxw() { return vex4d(w, x, x, w); };
	vex4d wxyx() { return vex4d(w, x, y, x); };
	vex4d wxyy() { return vex4d(w, x, y, y); };
	vex4d wxyz() { return vex4d(w, x, y, z); };
	vex4d wxyw() { return vex4d(w, x, y, w); };
	vex4d wxzx() { return vex4d(w, x, z, x); };
	vex4d wxzy() { return vex4d(w, x, z, y); };
	vex4d wxzz() { return vex4d(w, x, z, z); };
	vex4d wxzw() { return vex4d(w, x, z, w); };
	vex4d wxwx() { return vex4d(w, x, w, x); };
	vex4d wxwy() { return vex4d(w, x, w, y); };
	vex4d wxwz() { return vex4d(w, x, w, z); };
	vex4d wxww() { return vex4d(w, x, w, w); };
	vex4d wyxx() { return vex4d(w, y, x, x); };
	vex4d wyxy() { return vex4d(w, y, x, y); };
	vex4d wyxz() { return vex4d(w, y, x, z); };
	vex4d wyxw() { return vex4d(w, y, x, w); };
	vex4d wyyx() { return vex4d(w, y, y, x); };
	vex4d wyyy() { return vex4d(w, y, y, y); };
	vex4d wyyz() { return vex4d(w, y, y, z); };
	vex4d wyyw() { return vex4d(w, y, y, w); };
	vex4d wyzx() { return vex4d(w, y, z, x); };
	vex4d wyzy() { return vex4d(w, y, z, y); };
	vex4d wyzz() { return vex4d(w, y, z, z); };
	vex4d wyzw() { return vex4d(w, y, z, w); };
	vex4d wywx() { return vex4d(w, y, w, x); };
	vex4d wywy() { return vex4d(w, y, w, y); };
	vex4d wywz() { return vex4d(w, y, w, z); };
	vex4d wyww() { return vex4d(w, y, w, w); };
	vex4d wzxx() { return vex4d(w, z, x, x); };
	vex4d wzxy() { return vex4d(w, z, x, y); };
	vex4d wzxz() { return vex4d(w, z, x, z); };
	vex4d wzxw() { return vex4d(w, z, x, w); };
	vex4d wzyx() { return vex4d(w, z, y, x); };
	vex4d wzyy() { return vex4d(w, z, y, y); };
	vex4d wzyz() { return vex4d(w, z, y, z); };
	vex4d wzyw() { return vex4d(w, z, y, w); };
	vex4d wzzx() { return vex4d(w, z, z, x); };
	vex4d wzzy() { return vex4d(w, z, z, y); };
	vex4d wzzz() { return vex4d(w, z, z, z); };
	vex4d wzzw() { return vex4d(w, z, z, w); };
	vex4d wzwx() { return vex4d(w, z, w, x); };
	vex4d wzwy() { return vex4d(w, z, w, y); };
	vex4d wzwz() { return vex4d(w, z, w, z); };
	vex4d wzww() { return vex4d(w, z, w, w); };
	vex4d wwxx() { return vex4d(w, w, x, x); };
	vex4d wwxy() { return vex4d(w, w, x, y); };
	vex4d wwxz() { return vex4d(w, w, x, z); };
	vex4d wwxw() { return vex4d(w, w, x, w); };
	vex4d wwyx() { return vex4d(w, w, y, x); };
	vex4d wwyy() { return vex4d(w, w, y, y); };
	vex4d wwyz() { return vex4d(w, w, y, z); };
	vex4d wwyw() { return vex4d(w, w, y, w); };
	vex4d wwzx() { return vex4d(w, w, z, x); };
	vex4d wwzy() { return vex4d(w, w, z, y); };
	vex4d wwzz() { return vex4d(w, w, z, z); };
	vex4d wwzw() { return vex4d(w, w, z, w); };
	vex4d wwwx() { return vex4d(w, w, w, x); };
	vex4d wwwy() { return vex4d(w, w, w, y); };
	vex4d wwwz() { return vex4d(w, w, w, z); };
	vex4d wwww() { return vex4d(w, w, w, w); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex4d operator()(const char* v) {
		if (strlen(v) == 2)
			return vex4d(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y);
		else if (strlen(v) == 3)
			return vex4d(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y);
		else
			return vex4d(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y, v[3] == 'x' ? x : y);
	};

	double& operator[](int v);
	double& operator[](std::string v);
	vex4d operator!();
	vex4d operator%(std::string v);
	vex4d operator%(int v);
	vex4d operator%(double v);
	vex4d operator%(vex2f v);
	vex4d operator%(vex2d v);
	vex4d operator%(vex2i v);
	vex4d operator%(vex3f v);
	vex4d operator%(vex3d v);
	vex4d operator%(vex3i v);
	vex4d operator%(vex4f v);
	vex4d operator%(vex4d v);
	vex4d operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(double v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4d v);
	void operator%=(vex4f v);
	void operator%=(vex4i v);

	vex4d operator|(vex4d v);
	vex4d operator|(vex2d v);
	vex4d operator|(vex2i v);
	vex4d operator|(vex2f v);
	vex4d operator|(vex3d v);
	vex4d operator|(vex3i v);
	vex4d operator|(vex3f v);
	vex4d operator|(vex4f v);
	vex4d operator|(vex4i v);

	void operator|=(vex2d v);
	void operator|=(vex2f v);
	void operator|=(vex2i v);
	void operator|=(vex3d v);
	void operator|=(vex3f v);
	void operator|=(vex3i v);
	void operator|=(vex4d v);
	void operator|=(vex4f v);
	void operator|=(vex4i v);

	void operator= (vex2d v);
	void operator= (vex2i v);
	void operator= (vex2f v);
	void operator= (vex3d v);
	void operator= (vex3i v);
	void operator= (vex3f v);
	void operator= (vex4f v);
	void operator= (vex4i v);

	vex4d operator+ (vex4f v);
	vex4d operator- (vex4f v);
	vex4d operator* (vex4f v);
	vex4d operator/ (vex4f v);

	vex4d operator+ (vex4i v);
	vex4d operator- (vex4i v);
	vex4d operator* (vex4i v);
	vex4d operator/ (vex4i v);

	vex4d operator+ (vex3f v);
	vex4d operator- (vex3f v);
	vex4d operator* (vex3f v);
	vex4d operator/ (vex3f v);

	vex4d operator+ (vex3i v);
	vex4d operator- (vex3i v);
	vex4d operator* (vex3i v);
	vex4d operator/ (vex3i v);

	vex4d operator+ (vex3d v);
	vex4d operator- (vex3d v);
	vex4d operator* (vex3d v);
	vex4d operator/ (vex3d v);

	vex4d operator+ (vex2f v);
	vex4d operator- (vex2f v);
	vex4d operator* (vex2f v);
	vex4d operator/ (vex2f v);

	vex4d operator+ (vex2i v);
	vex4d operator- (vex2i v);
	vex4d operator* (vex2i v);
	vex4d operator/ (vex2i v);

	vex4d operator+ (vex2d v);
	vex4d operator- (vex2d v);
	vex4d operator* (vex2d v);
	vex4d operator/ (vex2d v);

	vex4d operator+ (vex4d v);
	vex4d operator- (vex4d v);
	vex4d operator* (vex4d v);
	vex4d operator/ (vex4d v);

	vex4d operator+ (double v);
	vex4d operator- (double v);
	vex4d operator* (double v);
	vex4d operator/ (double v);
	void operator= (double v);


	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (double v) { x += v; y += v; z += v; w += v; };
	void operator-= (double v) { x -= v; y -= v; z -= v; w -= v; };
	void operator*= (double v) { x *= v; y *= v; z *= v; w *= v; };
	void operator/= (double v) { x /= v; y /= v; z /= v; w /= v; };
	void operator++ () { x += 1.0; y += 1.0; };
	void operator-- () { x -= 1.0; y -= 1.0; };

	bool operator== (vex4d v);
	bool operator== (double v);
	bool operator!= (vex4d v);
	bool operator!= (double v);
	bool operator< (vex4d v);
	bool operator< (double v);
	bool operator<= (vex4d v);
	bool operator<= (double v);
	bool operator> (vex4d  v);
	bool operator> (double v);
	bool operator>= (vex4d v);
	bool operator>= (double v);

	void normalize();
	void ceil_();
	void floor_();
	void abs_();
	void sqrt_();
	void percent_(float v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex4d v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void round_();
	void trunc_();
	void exp_();
	void cbrt_();

	vex4d ceil();
	vex4d floor();
	vex4d abs();
	vex4d sqrt();
	vex4d percent(float v);
	vex4d pow(int v);
	vex4d rand(int v2, int v3);
	vex4d atan2(vex4d v);
	vex4d atan();
	vex4d asin();
	vex4d acos();
	vex4d tan();
	vex4d sin();
	vex4d cos();
	vex4d average();
	vex4d log();
	vex4d round();
	vex4d trunc();
	vex4d exp();
	vex4d cbrt();

	bool isEmpty();
};
// //////////////////////// //
struct vex4b {
	bool x, y, z, w;
	vex4b();
	vex4b(bool v1, bool v2, bool v3, bool v4);
	vex4b(bool v1, bool v2, bool v3);
	vex4b(bool v1, bool v2);
	vex4b(bool v1);
	void operator= (const bool v);
};
vex4b::vex4b() {
	x = y = z = w = 0;
};
vex4b::vex4b(bool v1, bool v2, bool v3, bool v4) {
	this->x = v1;
	this->y = v2;
	this->z = v3;
	this->w = v4;
};
vex4b::vex4b(bool v1, bool v2, bool v3) {
	this->x = v1;
	this->y = v2;
	this->z = v3;
	this->w = 0;
};
vex4b::vex4b(bool v1, bool v2) {
	this->x = v1;
	this->y = v2;
	this->z = 0;
	this->w = 0;
};
vex4b::vex4b(bool v1) {
	this->x = v1;
	this->y = v1;
	this->z = v1;
	this->w = v1;
};
void vex4b::operator=(const bool v) {
	this->x = v;
	this->y = v;
	this->z = v;
	this->w = v;
};
// //////////////////////// //
struct vex4i {
	int x, y, z, w;
	vex4i();
	vex4i(int v1, int v2, int v3, int v4);
	vex4i(int v1, int v2, int v3);
	vex4i(int v1, int v2);
	vex4i(int v1);
	vex4i(bool& v1, bool& v2, bool& v3, bool& v4) { x = std::atoi(v1); y = std::atoi(v2); z = std::atoi(v3); w = std::atoi(v4); };
	vex4i(bool& v1, bool& v2, bool& v3) { x = std::atoi(v1); y = std::atoi(v2); z = std::atoi(v3); };
	vex4i(bool& v1, bool& v2) { x = std::atoi(v1); y = std::atoi(v2); };
	vex4i(bool& v1) { x = std::atof(v1); y = std::atof(v1); z = std::atof(v1); w = std::atof(v1); };
	vex4i(std::string v1, std::string v2, std::string v3, std::string v4) { x = std::atoi(v1.c_str()); y = std::atoi(v2.c_str()); z = std::atoi(v3.c_str()); w = std::atoi(v4.c_str()); };
	vex4i(std::string v1, std::string v2, std::string v3) { x = std::atoi(v1.c_str()); y = std::atoi(v2.c_str()); z = std::atoi(v3.c_str()); };
	vex4i(std::string v1, std::string v2) { x = std::atoi(v1.c_str()); y = std::atoi(v2.c_str()); };
	vex4i(std::string v1) { x = std::atoi(v1.c_str()); y = std::atoi(v1.c_str());  z = std::atoi(v1.c_str()); w = std::atoi(v1.c_str()); };
	vex4i(vex2d v);
	vex4i(vex2i v);
	vex4i(vex2f v);
	vex4i(vex3d v);
	vex4i(vex3i v);
	vex4i(vex3f v);
	vex4i(vex4d v);
	vex4i(vex4f v);

	vex4i(vex2f v, float v1);
	vex4i(vex2f v, float v1, float v2);
	vex4i(float v2, vex2f v, float v1);
	vex4i(float v1, float v2, vex2f v);
	vex4i(float v1, vex2f v);
	vex4i(vex2f v, vex2f v1);
	vex4i(vex2f v, double v1);
	vex4i(vex2f v, double v1, double v2);
	vex4i(double v2, vex2f v, double v1);
	vex4i(double v1, double v2, vex2f v);
	vex4i(double v1, vex2f v);
	vex4i(vex2f v, int v1);
	vex4i(vex2f v, int v1, int v2);
	vex4i(int v2, vex2f v, int v1);
	vex4i(int v1, int v2, vex2f v);
	vex4i(int v1, vex2f v);

	vex4i(vex2d v, float v1);
	vex4i(vex2d v, float v1, float v2);
	vex4i(float v2, vex2d v, float v1);
	vex4i(float v1, float v2, vex2d v);
	vex4i(float v1, vex2d v);
	vex4i(vex2d v, vex2d v1);
	vex4i(vex2d v, double v1);
	vex4i(vex2d v, double v1, double v2);
	vex4i(double v2, vex2d v, double v1);
	vex4i(double v1, double v2, vex2d v);
	vex4i(double v1, vex2d v);
	vex4i(vex2d v, int v1);
	vex4i(vex2d v, int v1, int v2);
	vex4i(int v2, vex2d v, int v1);
	vex4i(int v1, int v2, vex2d v);
	vex4i(int v1, vex2d v);

	vex4i(vex2i v, float v1);
	vex4i(vex2i v, float v1, float v2);
	vex4i(float v2, vex2i v, float v1);
	vex4i(float v1, float v2, vex2i v);
	vex4i(float v1, vex2i v);
	vex4i(vex2i v, double v1);
	vex4i(vex2i v, double v1, double v2);
	vex4i(double v2, vex2i v, double v1);
	vex4i(double v1, double v2, vex2i v);
	vex4i(double v1, vex2i v);
	vex4i(vex2i v, int v1);
	vex4i(vex2i v, int v1, int v2);
	vex4i(int v2, vex2i v, int v1);
	vex4i(int v1, int v2, vex2i v);
	vex4i(int v1, vex2i v);
	vex4i(vex2i v, vex2i v1);

	vex4i(vex3f v, float v1);
	vex4i(float v1, vex3f v);
	vex4i(vex3d v, float v1);
	vex4i(float v1, vex3d v);
	vex4i(vex3i v, float v1);
	vex4i(float v1, vex3i v);

	vex4i(vex3f v, double v1);
	vex4i(double v1, vex3f v);
	vex4i(vex3d v, double v1);
	vex4i(double v1, vex3d v);
	vex4i(vex3i v, double v1);
	vex4i(double v1, vex3i v);

	vex4i(vex3f v, int v1);
	vex4i(int v1, vex3f v);
	vex4i(vex3d v, int v1);
	vex4i(int v1, vex3d v);
	vex4i(vex3i v, int v1);
	vex4i(int v1, vex3i v);

	vex2i xx() { return vex2i(x, x); };
	vex2i xy() { return vex2i(x, y); };
	vex2i xz() { return vex2i(x, z); };
	vex2i xw() { return vex2i(x, w); };
	vex2i yx() { return vex2i(y, x); };
	vex2i yy() { return vex2i(y, y); };
	vex2i yz() { return vex2i(y, z); };
	vex2i yw() { return vex2i(y, w); };
	vex2i zx() { return vex2i(z, x); };
	vex2i zy() { return vex2i(z, y); };
	vex2i zz() { return vex2i(z, z); };
	vex2i zw() { return vex2i(z, w); };
	vex2i wx() { return vex2i(w, x); };
	vex2i wy() { return vex2i(w, y); };
	vex2i wz() { return vex2i(w, z); };
	vex2i ww() { return vex2i(w, w); };
	vex3i xxx() { return vex3i(x, x, x); };
	vex3i xxy() { return vex3i(x, x, y); };
	vex3i xxz() { return vex3i(x, x, z); };
	vex3i xxw() { return vex3i(x, x, w); };
	vex3i xyx() { return vex3i(x, y, x); };
	vex3i xyy() { return vex3i(x, y, y); };
	vex3i xyz() { return vex3i(x, y, z); };
	vex3i xyw() { return vex3i(x, y, w); };
	vex3i xzx() { return vex3i(x, z, x); };
	vex3i xzy() { return vex3i(x, z, y); };
	vex3i xzz() { return vex3i(x, z, z); };
	vex3i xzw() { return vex3i(x, z, w); };
	vex3i xwx() { return vex3i(x, w, x); };
	vex3i xwy() { return vex3i(x, w, y); };
	vex3i xwz() { return vex3i(x, w, z); };
	vex3i xww() { return vex3i(x, w, w); };
	vex3i yxx() { return vex3i(y, x, x); };
	vex3i yxy() { return vex3i(y, x, y); };
	vex3i yxz() { return vex3i(y, x, z); };
	vex3i yxw() { return vex3i(y, x, w); };
	vex3i yyx() { return vex3i(y, y, x); };
	vex3i yyy() { return vex3i(y, y, y); };
	vex3i yyz() { return vex3i(y, y, z); };
	vex3i yyw() { return vex3i(y, y, w); };
	vex3i yzx() { return vex3i(y, z, x); };
	vex3i yzy() { return vex3i(y, z, y); };
	vex3i yzz() { return vex3i(y, z, z); };
	vex3i yzw() { return vex3i(y, z, w); };
	vex3i ywx() { return vex3i(y, w, x); };
	vex3i ywy() { return vex3i(y, w, y); };
	vex3i ywz() { return vex3i(y, w, z); };
	vex3i yww() { return vex3i(y, w, w); };
	vex3i zxx() { return vex3i(z, x, x); };
	vex3i zxy() { return vex3i(z, x, y); };
	vex3i zxz() { return vex3i(z, x, z); };
	vex3i zxw() { return vex3i(z, x, w); };
	vex3i zyx() { return vex3i(z, y, x); };
	vex3i zyy() { return vex3i(z, y, y); };
	vex3i zyz() { return vex3i(z, y, z); };
	vex3i zyw() { return vex3i(z, y, w); };
	vex3i zzx() { return vex3i(z, z, x); };
	vex3i zzy() { return vex3i(z, z, y); };
	vex3i zzz() { return vex3i(z, z, z); };
	vex3i zzw() { return vex3i(z, z, w); };
	vex3i zwx() { return vex3i(z, w, x); };
	vex3i zwy() { return vex3i(z, w, y); };
	vex3i zwz() { return vex3i(z, w, z); };
	vex3i zww() { return vex3i(z, w, w); };
	vex3i wxx() { return vex3i(w, x, x); };
	vex3i wxy() { return vex3i(w, x, y); };
	vex3i wxz() { return vex3i(w, x, z); };
	vex3i wxw() { return vex3i(w, x, w); };
	vex3i wyx() { return vex3i(w, y, x); };
	vex3i wyy() { return vex3i(w, y, y); };
	vex3i wyz() { return vex3i(w, y, z); };
	vex3i wyw() { return vex3i(w, y, w); };
	vex3i wzx() { return vex3i(w, z, x); };
	vex3i wzy() { return vex3i(w, z, y); };
	vex3i wzz() { return vex3i(w, z, z); };
	vex3i wzw() { return vex3i(w, z, w); };
	vex3i wwx() { return vex3i(w, w, x); };
	vex3i wwy() { return vex3i(w, w, y); };
	vex3i wwz() { return vex3i(w, w, z); };
	vex3i www() { return vex3i(w, w, w); };
	vex4i xxxx() { return vex4i(x, x, x, x); };
	vex4i xxxy() { return vex4i(x, x, x, y); };
	vex4i xxxz() { return vex4i(x, x, x, z); };
	vex4i xxxw() { return vex4i(x, x, x, w); };
	vex4i xxyx() { return vex4i(x, x, y, x); };
	vex4i xxyy() { return vex4i(x, x, y, y); };
	vex4i xxyz() { return vex4i(x, x, y, z); };
	vex4i xxyw() { return vex4i(x, x, y, w); };
	vex4i xxzx() { return vex4i(x, x, z, x); };
	vex4i xxzy() { return vex4i(x, x, z, y); };
	vex4i xxzz() { return vex4i(x, x, z, z); };
	vex4i xxzw() { return vex4i(x, x, z, w); };
	vex4i xxwx() { return vex4i(x, x, w, x); };
	vex4i xxwy() { return vex4i(x, x, w, y); };
	vex4i xxwz() { return vex4i(x, x, w, z); };
	vex4i xxww() { return vex4i(x, x, w, w); };
	vex4i xyxx() { return vex4i(x, y, x, x); };
	vex4i xyxy() { return vex4i(x, y, x, y); };
	vex4i xyxz() { return vex4i(x, y, x, z); };
	vex4i xyxw() { return vex4i(x, y, x, w); };
	vex4i xyyx() { return vex4i(x, y, y, x); };
	vex4i xyyy() { return vex4i(x, y, y, y); };
	vex4i xyyz() { return vex4i(x, y, y, z); };
	vex4i xyyw() { return vex4i(x, y, y, w); };
	vex4i xyzx() { return vex4i(x, y, z, x); };
	vex4i xyzy() { return vex4i(x, y, z, y); };
	vex4i xyzz() { return vex4i(x, y, z, z); };
	vex4i xyzw() { return vex4i(x, y, z, w); };
	vex4i xywx() { return vex4i(x, y, w, x); };
	vex4i xywy() { return vex4i(x, y, w, y); };
	vex4i xywz() { return vex4i(x, y, w, z); };
	vex4i xyww() { return vex4i(x, y, w, w); };
	vex4i xzxx() { return vex4i(x, z, x, x); };
	vex4i xzxy() { return vex4i(x, z, x, y); };
	vex4i xzxz() { return vex4i(x, z, x, z); };
	vex4i xzxw() { return vex4i(x, z, x, w); };
	vex4i xzyx() { return vex4i(x, z, y, x); };
	vex4i xzyy() { return vex4i(x, z, y, y); };
	vex4i xzyz() { return vex4i(x, z, y, z); };
	vex4i xzyw() { return vex4i(x, z, y, w); };
	vex4i xzzx() { return vex4i(x, z, z, x); };
	vex4i xzzy() { return vex4i(x, z, z, y); };
	vex4i xzzz() { return vex4i(x, z, z, z); };
	vex4i xzzw() { return vex4i(x, z, z, w); };
	vex4i xzwx() { return vex4i(x, z, w, x); };
	vex4i xzwy() { return vex4i(x, z, w, y); };
	vex4i xzwz() { return vex4i(x, z, w, z); };
	vex4i xzww() { return vex4i(x, z, w, w); };
	vex4i xwxx() { return vex4i(x, w, x, x); };
	vex4i xwxy() { return vex4i(x, w, x, y); };
	vex4i xwxz() { return vex4i(x, w, x, z); };
	vex4i xwxw() { return vex4i(x, w, x, w); };
	vex4i xwyx() { return vex4i(x, w, y, x); };
	vex4i xwyy() { return vex4i(x, w, y, y); };
	vex4i xwyz() { return vex4i(x, w, y, z); };
	vex4i xwyw() { return vex4i(x, w, y, w); };
	vex4i xwzx() { return vex4i(x, w, z, x); };
	vex4i xwzy() { return vex4i(x, w, z, y); };
	vex4i xwzz() { return vex4i(x, w, z, z); };
	vex4i xwzw() { return vex4i(x, w, z, w); };
	vex4i xwwx() { return vex4i(x, w, w, x); };
	vex4i xwwy() { return vex4i(x, w, w, y); };
	vex4i xwwz() { return vex4i(x, w, w, z); };
	vex4i xwww() { return vex4i(x, w, w, w); };
	vex4i yxxx() { return vex4i(y, x, x, x); };
	vex4i yxxy() { return vex4i(y, x, x, y); };
	vex4i yxxz() { return vex4i(y, x, x, z); };
	vex4i yxxw() { return vex4i(y, x, x, w); };
	vex4i yxyx() { return vex4i(y, x, y, x); };
	vex4i yxyy() { return vex4i(y, x, y, y); };
	vex4i yxyz() { return vex4i(y, x, y, z); };
	vex4i yxyw() { return vex4i(y, x, y, w); };
	vex4i yxzx() { return vex4i(y, x, z, x); };
	vex4i yxzy() { return vex4i(y, x, z, y); };
	vex4i yxzz() { return vex4i(y, x, z, z); };
	vex4i yxzw() { return vex4i(y, x, z, w); };
	vex4i yxwx() { return vex4i(y, x, w, x); };
	vex4i yxwy() { return vex4i(y, x, w, y); };
	vex4i yxwz() { return vex4i(y, x, w, z); };
	vex4i yxww() { return vex4i(y, x, w, w); };
	vex4i yyxx() { return vex4i(y, y, x, x); };
	vex4i yyxy() { return vex4i(y, y, x, y); };
	vex4i yyxz() { return vex4i(y, y, x, z); };
	vex4i yyxw() { return vex4i(y, y, x, w); };
	vex4i yyyx() { return vex4i(y, y, y, x); };
	vex4i yyyy() { return vex4i(y, y, y, y); };
	vex4i yyyz() { return vex4i(y, y, y, z); };
	vex4i yyyw() { return vex4i(y, y, y, w); };
	vex4i yyzx() { return vex4i(y, y, z, x); };
	vex4i yyzy() { return vex4i(y, y, z, y); };
	vex4i yyzz() { return vex4i(y, y, z, z); };
	vex4i yyzw() { return vex4i(y, y, z, w); };
	vex4i yywx() { return vex4i(y, y, w, x); };
	vex4i yywy() { return vex4i(y, y, w, y); };
	vex4i yywz() { return vex4i(y, y, w, z); };
	vex4i yyww() { return vex4i(y, y, w, w); };
	vex4i yzxx() { return vex4i(y, z, x, x); };
	vex4i yzxy() { return vex4i(y, z, x, y); };
	vex4i yzxz() { return vex4i(y, z, x, z); };
	vex4i yzxw() { return vex4i(y, z, x, w); };
	vex4i yzyx() { return vex4i(y, z, y, x); };
	vex4i yzyy() { return vex4i(y, z, y, y); };
	vex4i yzyz() { return vex4i(y, z, y, z); };
	vex4i yzyw() { return vex4i(y, z, y, w); };
	vex4i yzzx() { return vex4i(y, z, z, x); };
	vex4i yzzy() { return vex4i(y, z, z, y); };
	vex4i yzzz() { return vex4i(y, z, z, z); };
	vex4i yzzw() { return vex4i(y, z, z, w); };
	vex4i yzwx() { return vex4i(y, z, w, x); };
	vex4i yzwy() { return vex4i(y, z, w, y); };
	vex4i yzwz() { return vex4i(y, z, w, z); };
	vex4i yzww() { return vex4i(y, z, w, w); };
	vex4i ywxx() { return vex4i(y, w, x, x); };
	vex4i ywxy() { return vex4i(y, w, x, y); };
	vex4i ywxz() { return vex4i(y, w, x, z); };
	vex4i ywxw() { return vex4i(y, w, x, w); };
	vex4i ywyx() { return vex4i(y, w, y, x); };
	vex4i ywyy() { return vex4i(y, w, y, y); };
	vex4i ywyz() { return vex4i(y, w, y, z); };
	vex4i ywyw() { return vex4i(y, w, y, w); };
	vex4i ywzx() { return vex4i(y, w, z, x); };
	vex4i ywzy() { return vex4i(y, w, z, y); };
	vex4i ywzz() { return vex4i(y, w, z, z); };
	vex4i ywzw() { return vex4i(y, w, z, w); };
	vex4i ywwx() { return vex4i(y, w, w, x); };
	vex4i ywwy() { return vex4i(y, w, w, y); };
	vex4i ywwz() { return vex4i(y, w, w, z); };
	vex4i ywww() { return vex4i(y, w, w, w); };
	vex4i zxxx() { return vex4i(z, x, x, x); };
	vex4i zxxy() { return vex4i(z, x, x, y); };
	vex4i zxxz() { return vex4i(z, x, x, z); };
	vex4i zxxw() { return vex4i(z, x, x, w); };
	vex4i zxyx() { return vex4i(z, x, y, x); };
	vex4i zxyy() { return vex4i(z, x, y, y); };
	vex4i zxyz() { return vex4i(z, x, y, z); };
	vex4i zxyw() { return vex4i(z, x, y, w); };
	vex4i zxzx() { return vex4i(z, x, z, x); };
	vex4i zxzy() { return vex4i(z, x, z, y); };
	vex4i zxzz() { return vex4i(z, x, z, z); };
	vex4i zxzw() { return vex4i(z, x, z, w); };
	vex4i zxwx() { return vex4i(z, x, w, x); };
	vex4i zxwy() { return vex4i(z, x, w, y); };
	vex4i zxwz() { return vex4i(z, x, w, z); };
	vex4i zxww() { return vex4i(z, x, w, w); };
	vex4i zyxx() { return vex4i(z, y, x, x); };
	vex4i zyxy() { return vex4i(z, y, x, y); };
	vex4i zyxz() { return vex4i(z, y, x, z); };
	vex4i zyxw() { return vex4i(z, y, x, w); };
	vex4i zyyx() { return vex4i(z, y, y, x); };
	vex4i zyyy() { return vex4i(z, y, y, y); };
	vex4i zyyz() { return vex4i(z, y, y, z); };
	vex4i zyyw() { return vex4i(z, y, y, w); };
	vex4i zyzx() { return vex4i(z, y, z, x); };
	vex4i zyzy() { return vex4i(z, y, z, y); };
	vex4i zyzz() { return vex4i(z, y, z, z); };
	vex4i zyzw() { return vex4i(z, y, z, w); };
	vex4i zywx() { return vex4i(z, y, w, x); };
	vex4i zywy() { return vex4i(z, y, w, y); };
	vex4i zywz() { return vex4i(z, y, w, z); };
	vex4i zyww() { return vex4i(z, y, w, w); };
	vex4i zzxx() { return vex4i(z, z, x, x); };
	vex4i zzxy() { return vex4i(z, z, x, y); };
	vex4i zzxz() { return vex4i(z, z, x, z); };
	vex4i zzxw() { return vex4i(z, z, x, w); };
	vex4i zzyx() { return vex4i(z, z, y, x); };
	vex4i zzyy() { return vex4i(z, z, y, y); };
	vex4i zzyz() { return vex4i(z, z, y, z); };
	vex4i zzyw() { return vex4i(z, z, y, w); };
	vex4i zzzx() { return vex4i(z, z, z, x); };
	vex4i zzzy() { return vex4i(z, z, z, y); };
	vex4i zzzz() { return vex4i(z, z, z, z); };
	vex4i zzzw() { return vex4i(z, z, z, w); };
	vex4i zzwx() { return vex4i(z, z, w, x); };
	vex4i zzwy() { return vex4i(z, z, w, y); };
	vex4i zzwz() { return vex4i(z, z, w, z); };
	vex4i zzww() { return vex4i(z, z, w, w); };
	vex4i zwxx() { return vex4i(z, w, x, x); };
	vex4i zwxy() { return vex4i(z, w, x, y); };
	vex4i zwxz() { return vex4i(z, w, x, z); };
	vex4i zwxw() { return vex4i(z, w, x, w); };
	vex4i zwyx() { return vex4i(z, w, y, x); };
	vex4i zwyy() { return vex4i(z, w, y, y); };
	vex4i zwyz() { return vex4i(z, w, y, z); };
	vex4i zwyw() { return vex4i(z, w, y, w); };
	vex4i zwzx() { return vex4i(z, w, z, x); };
	vex4i zwzy() { return vex4i(z, w, z, y); };
	vex4i zwzz() { return vex4i(z, w, z, z); };
	vex4i zwzw() { return vex4i(z, w, z, w); };
	vex4i zwwx() { return vex4i(z, w, w, x); };
	vex4i zwwy() { return vex4i(z, w, w, y); };
	vex4i zwwz() { return vex4i(z, w, w, z); };
	vex4i zwww() { return vex4i(z, w, w, w); };
	vex4i wxxx() { return vex4i(w, x, x, x); };
	vex4i wxxy() { return vex4i(w, x, x, y); };
	vex4i wxxz() { return vex4i(w, x, x, z); };
	vex4i wxxw() { return vex4i(w, x, x, w); };
	vex4i wxyx() { return vex4i(w, x, y, x); };
	vex4i wxyy() { return vex4i(w, x, y, y); };
	vex4i wxyz() { return vex4i(w, x, y, z); };
	vex4i wxyw() { return vex4i(w, x, y, w); };
	vex4i wxzx() { return vex4i(w, x, z, x); };
	vex4i wxzy() { return vex4i(w, x, z, y); };
	vex4i wxzz() { return vex4i(w, x, z, z); };
	vex4i wxzw() { return vex4i(w, x, z, w); };
	vex4i wxwx() { return vex4i(w, x, w, x); };
	vex4i wxwy() { return vex4i(w, x, w, y); };
	vex4i wxwz() { return vex4i(w, x, w, z); };
	vex4i wxww() { return vex4i(w, x, w, w); };
	vex4i wyxx() { return vex4i(w, y, x, x); };
	vex4i wyxy() { return vex4i(w, y, x, y); };
	vex4i wyxz() { return vex4i(w, y, x, z); };
	vex4i wyxw() { return vex4i(w, y, x, w); };
	vex4i wyyx() { return vex4i(w, y, y, x); };
	vex4i wyyy() { return vex4i(w, y, y, y); };
	vex4i wyyz() { return vex4i(w, y, y, z); };
	vex4i wyyw() { return vex4i(w, y, y, w); };
	vex4i wyzx() { return vex4i(w, y, z, x); };
	vex4i wyzy() { return vex4i(w, y, z, y); };
	vex4i wyzz() { return vex4i(w, y, z, z); };
	vex4i wyzw() { return vex4i(w, y, z, w); };
	vex4i wywx() { return vex4i(w, y, w, x); };
	vex4i wywy() { return vex4i(w, y, w, y); };
	vex4i wywz() { return vex4i(w, y, w, z); };
	vex4i wyww() { return vex4i(w, y, w, w); };
	vex4i wzxx() { return vex4i(w, z, x, x); };
	vex4i wzxy() { return vex4i(w, z, x, y); };
	vex4i wzxz() { return vex4i(w, z, x, z); };
	vex4i wzxw() { return vex4i(w, z, x, w); };
	vex4i wzyx() { return vex4i(w, z, y, x); };
	vex4i wzyy() { return vex4i(w, z, y, y); };
	vex4i wzyz() { return vex4i(w, z, y, z); };
	vex4i wzyw() { return vex4i(w, z, y, w); };
	vex4i wzzx() { return vex4i(w, z, z, x); };
	vex4i wzzy() { return vex4i(w, z, z, y); };
	vex4i wzzz() { return vex4i(w, z, z, z); };
	vex4i wzzw() { return vex4i(w, z, z, w); };
	vex4i wzwx() { return vex4i(w, z, w, x); };
	vex4i wzwy() { return vex4i(w, z, w, y); };
	vex4i wzwz() { return vex4i(w, z, w, z); };
	vex4i wzww() { return vex4i(w, z, w, w); };
	vex4i wwxx() { return vex4i(w, w, x, x); };
	vex4i wwxy() { return vex4i(w, w, x, y); };
	vex4i wwxz() { return vex4i(w, w, x, z); };
	vex4i wwxw() { return vex4i(w, w, x, w); };
	vex4i wwyx() { return vex4i(w, w, y, x); };
	vex4i wwyy() { return vex4i(w, w, y, y); };
	vex4i wwyz() { return vex4i(w, w, y, z); };
	vex4i wwyw() { return vex4i(w, w, y, w); };
	vex4i wwzx() { return vex4i(w, w, z, x); };
	vex4i wwzy() { return vex4i(w, w, z, y); };
	vex4i wwzz() { return vex4i(w, w, z, z); };
	vex4i wwzw() { return vex4i(w, w, z, w); };
	vex4i wwwx() { return vex4i(w, w, w, x); };
	vex4i wwwy() { return vex4i(w, w, w, y); };
	vex4i wwwz() { return vex4i(w, w, w, z); };
	vex4i wwww() { return vex4i(w, w, w, w); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex4i operator()(const char* v) {
		if (strlen(v) == 2)
			return vex4i(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y);
		else if (strlen(v) == 3)
			return vex4i(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y);
		else
			return vex4i(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y, v[3] == 'x' ? x : y);
	};

	int& operator[](int v);
	int& operator[](std::string v);
	vex4i operator!();
	vex4i operator%(std::string v);
	vex4i operator%(int v);
	vex4i operator%(vex2f v);
	vex4i operator%(vex2d v);
	vex4i operator%(vex2i v);
	vex4i operator%(vex3f v);
	vex4i operator%(vex3d v);
	vex4i operator%(vex3i v);
	vex4i operator%(vex4f v);
	vex4i operator%(vex4d v);
	vex4i operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4d v);
	void operator%=(vex4f v);
	void operator%=(vex4i v);

	vex4i operator|(vex4i v);
	vex4i operator|(vex2d v);
	vex4i operator|(vex2i v);
	vex4i operator|(vex2f v);
	vex4i operator|(vex3d v);
	vex4i operator|(vex3i v);
	vex4i operator|(vex3f v);
	vex4i operator|(vex4f v);
	vex4i operator|(vex4d v);

	void operator|=(vex2i v);
	void operator|=(vex2f v);
	void operator|=(vex2d v);
	void operator|=(vex3i v);
	void operator|=(vex3f v);
	void operator|=(vex3d v);
	void operator|=(vex4i v);
	void operator|=(vex4f v);
	void operator|=(vex4d v);

	void operator= (vex2d v);
	void operator= (vex2i v);
	void operator= (vex2f v);
	void operator= (vex3d v);
	void operator= (vex3i v);
	void operator= (vex3f v);
	void operator= (vex4d v);
	void operator= (vex4f v);

	vex4i operator+ (vex4f v);
	vex4i operator- (vex4f v);
	vex4i operator* (vex4f v);
	vex4i operator/ (vex4f v);

	vex4i operator+ (vex4d v);
	vex4i operator- (vex4d v);
	vex4i operator* (vex4d v);
	vex4i operator/ (vex4d v);

	vex4i operator+ (vex3f v);
	vex4i operator- (vex3f v);
	vex4i operator* (vex3f v);
	vex4i operator/ (vex3f v);

	vex4i operator+ (vex3i v);
	vex4i operator- (vex3i v);
	vex4i operator* (vex3i v);
	vex4i operator/ (vex3i v);

	vex4i operator+ (vex3d v);
	vex4i operator- (vex3d v);
	vex4i operator* (vex3d v);
	vex4i operator/ (vex3d v);

	vex4i operator+ (vex2f v);
	vex4i operator- (vex2f v);
	vex4i operator* (vex2f v);
	vex4i operator/ (vex2f v);

	vex4i operator+ (vex2i v);
	vex4i operator- (vex2i v);
	vex4i operator* (vex2i v);
	vex4i operator/ (vex2i v);

	vex4i operator+ (vex2d v);
	vex4i operator- (vex2d v);
	vex4i operator* (vex2d v);
	vex4i operator/ (vex2d v);

	vex4i operator+ (vex4i v);
	vex4i operator- (vex4i v);
	vex4i operator* (vex4i v);
	vex4i operator/ (vex4i v);

	vex4i operator+ (int v);
	vex4i operator- (int v);
	vex4i operator* (int v);
	vex4i operator/ (int v);
	void operator= (int v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (int v) { x += v; y += v; z += v; w += v; };
	void operator-= (int v) { x -= v; y -= v; z -= v; w -= v; };
	void operator*= (int v) { x *= v; y *= v; z *= v; w *= v; };
	void operator/= (int v) { x /= v; y /= v; z /= v; w /= v; };
	void operator++ () { x++; y++; };
	void operator-- () { x--; y--; };

	bool operator== (vex4i v);
	bool operator== (int v);
	bool operator!= (vex4i v);
	bool operator!= (int v);
	bool operator< (vex4i v);
	bool operator< (int v);
	bool operator<= (vex4i v);
	bool operator<= (int v);
	bool operator> (vex4i v);
	bool operator> (int v);
	bool operator>= (vex4i v);
	bool operator>= (int v);

	void normalize();
	void abs_();
	void sqrt_();
	void percent_(int v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex4i v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void exp_();
	void cbrt_();

	vex4i abs();
	vex4i sqrt();
	vex4i percent(int v);
	vex4i pow(int v);
	vex4i rand(int v2, int v3);
	vex4i atan2(vex4i v);
	vex4i atan();
	vex4i asin();
	vex4i acos();
	vex4i tan();
	vex4i sin();
	vex4i cos();
	vex4i average();
	vex4i log();
	vex4i exp();
	vex4i cbrt();

	bool isEmpty();
};
// /////////////////////////////////// ///
struct vex4s {
	std::string x, y, z, w;
	vex4s();
	vex4s(std::string v1, std::string v2, std::string v3, std::string v4);
	vex4s operator+ (const vex4s& v);

	vex4s operator+ (const std::string v);
	void operator= (const std::string v);
	void operator+= (const vex4s& v);
};
vex4s::vex4s() {
	x = y = z = w = "";
};
vex4s::vex4s(std::string v1, std::string v2, std::string v3, std::string v4) {
	this->x = v1;
	this->y = v2;
	this->z = v3;
	this->z = v4;
};
void vex4s::operator=(const std::string v) {
	this->x = v;
	this->y = v;
	this->z = v;
	this->w = v;
};
vex4s vex4s::operator+(const vex4s& v) {
	vex4s __temp;
	__temp.x = this->x + v.x;
	__temp.y = this->y + v.y;
	__temp.z = this->z + v.z;
	__temp.w = this->w + v.w;
	return __temp;
};
vex4s vex4s::operator+(const std::string v) {
	vex4s __temp;
	__temp.x = this->x + v;
	__temp.y = this->y + v;
	__temp.z = this->z + v;
	__temp.w = this->w + v;
	return __temp;
};
void vex4s::operator+=(const vex4s& v) {
	this->x += v.x;
	this->y += v.y;
	this->z += v.z;
	this->w += v.w;
};

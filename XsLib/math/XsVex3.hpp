struct vex3f {
	float x, y, z;
	vex3f();
	vex3f(float v1, float v2, float v3);
	vex3f(float v1, float v2);
	vex3f(float v1);
	vex3f(bool& v1, bool& v2, bool& v3) { x = std::atof(v1); y = std::atof(v2); z = std::atof(v3); };
	vex3f(bool& v1, bool& v2) { x = std::atof(v1); y = std::atof(v2); };
	vex3f(bool& v1) { x = std::atof(v1); y = std::atof(v1); z = std::atof(v1); };
	vex3f(std::string v1, std::string v2, std::string v3) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); z = std::atof(v3.c_str()); };
	vex3f(std::string v1, std::string v2) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); };
	vex3f(std::string v1) { x = std::atof(v1.c_str()); y = std::atof(v1.c_str()); z = std::atof(v1.c_str()); };
	vex3f(vex2d v);
	vex3f(vex2i v);
	vex3f(vex2f v);
	vex3f(vex3d v);
	vex3f(vex3i v);
	vex3f(vex4f v);
	vex3f(vex4d v);
	vex3f(vex4i v);

	vex3f(vex2f v, float v1);
	vex3f(float v1, vex2f v);
	vex3f(vex2d v, float v1);
	vex3f(float v1, vex2d v);
	vex3f(vex2i v, float v1);
	vex3f(float v1, vex2i v);

	vex3f(vex2f v, double v1);
	vex3f(double v1, vex2f v);
	vex3f(vex2d v, double v1);
	vex3f(double v1, vex2d v);
	vex3f(vex2i v, double v1);
	vex3f(double v1, vex2i v);

	vex3f(vex2f v, int v1);
	vex3f(int v1, vex2f v);
	vex3f(vex2d v, int v1);
	vex3f(int v1, vex2d v);
	vex3f(vex2i v, int v1);
	vex3f(int v1, vex2i v);

	vex2f xx() { return vex2f(x, x); };
	vex2f xy() { return vex2f(x, y); };
	vex2f xz() { return vex2f(x, z); };
	vex2f yx() { return vex2f(y, x); };
	vex2f yy() { return vex2f(y, y); };
	vex2f yz() { return vex2f(y, z); };
	vex2f zx() { return vex2f(z, x); };
	vex2f zy() { return vex2f(z, y); };
	vex2f zz() { return vex2f(z, z); };
	vex3f xxx() { return vex3f(x, x, x); };
	vex3f xxy() { return vex3f(x, x, y); };
	vex3f xxz() { return vex3f(x, x, z); };
	vex3f xyx() { return vex3f(x, y, x); };
	vex3f xyy() { return vex3f(x, y, y); };
	vex3f xyz() { return vex3f(x, y, z); };
	vex3f xzx() { return vex3f(x, z, x); };
	vex3f xzy() { return vex3f(x, z, y); };
	vex3f xzz() { return vex3f(x, z, z); };
	vex3f yxx() { return vex3f(y, x, x); };
	vex3f yxy() { return vex3f(y, x, y); };
	vex3f yxz() { return vex3f(y, x, z); };
	vex3f yyx() { return vex3f(y, y, x); };
	vex3f yyy() { return vex3f(y, y, y); };
	vex3f yyz() { return vex3f(y, y, z); };
	vex3f yzx() { return vex3f(y, z, x); };
	vex3f yzy() { return vex3f(y, z, y); };
	vex3f yzz() { return vex3f(y, z, z); };
	vex3f zxx() { return vex3f(z, x, x); };
	vex3f zxy() { return vex3f(z, x, y); };
	vex3f zxz() { return vex3f(z, x, z); };
	vex3f zyx() { return vex3f(z, y, x); };
	vex3f zyy() { return vex3f(z, y, y); };
	vex3f zyz() { return vex3f(z, y, z); };
	vex3f zzx() { return vex3f(z, z, x); };
	vex3f zzy() { return vex3f(z, z, y); };
	vex3f zzz() { return vex3f(z, z, z); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex3f operator()(const char* v) {
		if (strlen(v) == 2)
			return vex3f(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y);
		else
			return vex3f(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y);
	};

	float& operator[](int v);
	float& operator[](std::string v);
	vex3f operator!();
	vex3f operator%(std::string v);
	vex3f operator%(int v);
	vex3f operator%(float v);
	vex3f operator%(vex2f v);
	vex3f operator%(vex2d v);
	vex3f operator%(vex2i v);
	vex3f operator%(vex3f v);
	vex3f operator%(vex3d v);
	vex3f operator%(vex3i v);
	vex3f operator%(vex4f v);
	vex3f operator%(vex4d v);
	vex3f operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(float v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4f v);
	void operator%=(vex4d v);
	void operator%=(vex4i v);

	vex3f operator|(vex3f v);
	vex3f operator|(vex2d v);
	vex3f operator|(vex2i v);
	vex3f operator|(vex2f v);
	vex3f operator|(vex3d v);
	vex3f operator|(vex3i v);
	vex3f operator|(vex4f v);
	vex3f operator|(vex4d v);
	vex3f operator|(vex4i v);

	void operator|=(vex2f v);
	void operator|=(vex2d v);
	void operator|=(vex2i v);
	void operator|=(vex3f v);
	void operator|=(vex3d v);
	void operator|=(vex3i v);
	void operator|=(vex4f v);
	void operator|=(vex4d v);
	void operator|=(vex4i v);

	void operator= (vex2d v);
	void operator= (vex2i v);
	void operator= (vex2f v);
	void operator= (vex3d v);
	void operator= (vex3i v);
	void operator= (vex4f v);
	void operator= (vex4d v);
	void operator= (vex4i v);

	vex3f operator+ (vex4f v);
	vex3f operator- (vex4f v);
	vex3f operator* (vex4f v);
	vex3f operator/ (vex4f v);
	vex3f operator+ (vex4d v);
	vex3f operator- (vex4d v);
	vex3f operator* (vex4d v);
	vex3f operator/ (vex4d v);
	vex3f operator+ (vex4i v);
	vex3f operator- (vex4i v);
	vex3f operator* (vex4i v);
	vex3f operator/ (vex4i v);
	vex3f operator+ (vex3i v);
	vex3f operator- (vex3i v);
	vex3f operator* (vex3i v);
	vex3f operator/ (vex3i v);
	vex3f operator+ (vex3d v);
	vex3f operator- (vex3d v);
	vex3f operator* (vex3d v);
	vex3f operator/ (vex3d v);
	vex3f operator+ (vex2f v);
	vex3f operator- (vex2f v);
	vex3f operator* (vex2f v);
	vex3f operator/ (vex2f v);
	vex3f operator+ (vex2i v);
	vex3f operator- (vex2i v);
	vex3f operator* (vex2i v);
	vex3f operator/ (vex2i v);
	vex3f operator+ (vex2d v);
	vex3f operator- (vex2d v);
	vex3f operator* (vex2d v);
	vex3f operator/ (vex2d v);
	vex3f operator+ (vex3f v);
	vex3f operator- (vex3f v);
	vex3f operator* (vex3f v);
	vex3f operator/ (vex3f v);

	vex3f operator+ (float v);
	vex3f operator- (float v);
	vex3f operator* (float v);
	vex3f operator/ (float v);
	void operator= (float v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (float v) { x += v; y += v; z += v; };
	void operator-= (float v) { x -= v; y -= v; z -= v; };
	void operator*= (float v) { x *= v; y *= v; z *= v; };
	void operator/= (float v) { x /= v; y /= v; z /= v; };
	void operator++ () { x += 1.0f; y += 1.0f; };
	void operator-- () { x -= 1.0f; y -= 1.0f; };

	bool operator== (vex3f v);
	bool operator== (float v);
	bool operator!= (vex3f v);
	bool operator!= (float v);
	bool operator< (vex3f v);
	bool operator< (float v);
	bool operator<= (vex3f v);
	bool operator<= (float v);
	bool operator> (vex3f v);
	bool operator> (float v);
	bool operator>= (vex3f v);
	bool operator>= (float v);

	void normalize();
	void ceil_();
	void floor_();
	void abs_();
	void sqrt_();
	void percent_(float v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex3f v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void round_();
	void trunc_();
	void exp_();
	void cbrt_();

	vex3f ceil();
	vex3f floor();
	vex3f abs();
	vex3f sqrt();
	vex3f percent(float v);
	vex3f pow(int v);
	vex3f rand(int v2, int v3);
	vex3f atan2(vex3f v);
	vex3f atan();
	vex3f asin();
	vex3f acos();
	vex3f tan();
	vex3f sin();
	vex3f cos();
	vex3f average();
	vex3f log();
	vex3f round();
	vex3f trunc();
	vex3f exp();
	vex3f cbrt();

	bool isEmpty();
};
// ////////////////////// //
struct vex3d {
	double x, y, z;
	vex3d();
	vex3d(double v1, double v2, double v3);
	vex3d(double v1, double v2);
	vex3d(double v1);
	vex3d(bool& v1, bool& v2, bool& v3) { x = std::atof(v1); y = std::atof(v2); z = std::atof(v3); };
	vex3d(bool& v1, bool& v2) { x = std::atof(v1); y = std::atof(v2); };
	vex3d(bool& v1) { x = std::atof(v1); y = std::atof(v1); z = std::atof(v1); };
	vex3d(std::string v1, std::string v2, std::string v3) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); z = std::atof(v3.c_str()); };
	vex3d(std::string v1, std::string v2) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); };
	vex3d(std::string v1) { x = std::atof(v1.c_str()); y = std::atof(v1.c_str()); z = std::atoi(v1.c_str()); };
	vex3d(vex2d v);
	vex3d(vex2i v);
	vex3d(vex2f v);
	vex3d(vex3f v);
	vex3d(vex3i v);
	vex3d(vex4f v);
	vex3d(vex4d v);
	vex3d(vex4i v);

	vex3d(vex2f v, float v1);
	vex3d(float v1, vex2f v);
	vex3d(vex2d v, float v1);
	vex3d(float v1, vex2d v);
	vex3d(vex2i v, float v1);
	vex3d(float v1, vex2i v);

	vex3d(vex2f v, double v1);
	vex3d(double v1, vex2f v);
	vex3d(vex2d v, double v1);
	vex3d(double v1, vex2d v);
	vex3d(vex2i v, double v1);
	vex3d(double v1, vex2i v);

	vex3d(vex2f v, int v1);
	vex3d(int v1, vex2f v);
	vex3d(vex2d v, int v1);
	vex3d(int v1, vex2d v);
	vex3d(vex2i v, int v1);
	vex3d(int v1, vex2i v);

	vex2d xx() { return vex2d(x, x); };
	vex2d xy() { return vex2d(x, y); };
	vex2d xz() { return vex2d(x, z); };
	vex2d yx() { return vex2d(y, x); };
	vex2d yy() { return vex2d(y, y); };
	vex2d yz() { return vex2d(y, z); };
	vex2d zx() { return vex2d(z, x); };
	vex2d zy() { return vex2d(z, y); };
	vex2d zz() { return vex2d(z, z); };
	vex3d xxx() { return vex3d(x, x, x); };
	vex3d xxy() { return vex3d(x, x, y); };
	vex3d xxz() { return vex3d(x, x, z); };
	vex3d xyx() { return vex3d(x, y, x); };
	vex3d xyy() { return vex3d(x, y, y); };
	vex3d xyz() { return vex3d(x, y, z); };
	vex3d xzx() { return vex3d(x, z, x); };
	vex3d xzy() { return vex3d(x, z, y); };
	vex3d xzz() { return vex3d(x, z, z); };
	vex3d yxx() { return vex3d(y, x, x); };
	vex3d yxy() { return vex3d(y, x, y); };
	vex3d yxz() { return vex3d(y, x, z); };
	vex3d yyx() { return vex3d(y, y, x); };
	vex3d yyy() { return vex3d(y, y, y); };
	vex3d yyz() { return vex3d(y, y, z); };
	vex3d yzx() { return vex3d(y, z, x); };
	vex3d yzy() { return vex3d(y, z, y); };
	vex3d yzz() { return vex3d(y, z, z); };
	vex3d zxx() { return vex3d(z, x, x); };
	vex3d zxy() { return vex3d(z, x, y); };
	vex3d zxz() { return vex3d(z, x, z); };
	vex3d zyx() { return vex3d(z, y, x); };
	vex3d zyy() { return vex3d(z, y, y); };
	vex3d zyz() { return vex3d(z, y, z); };
	vex3d zzx() { return vex3d(z, z, x); };
	vex3d zzy() { return vex3d(z, z, y); };
	vex3d zzz() { return vex3d(z, z, z); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex3d operator()(const char* v) {
		if (strlen(v) == 2)
			return vex3d(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y);
		else
			return vex3d(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y);
	};

	double& operator[](int v);
	double& operator[](std::string v);
	vex3d operator!();
	vex3d operator%(std::string v);
	vex3d operator%(int v);
	vex3d operator%(double v);
	vex3d operator%(vex2f v);
	vex3d operator%(vex2d v);
	vex3d operator%(vex2i v);
	vex3d operator%(vex3f v);
	vex3d operator%(vex3d v);
	vex3d operator%(vex3i v);
	vex3d operator%(vex4f v);
	vex3d operator%(vex4d v);
	vex3d operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(double v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4f v);
	void operator%=(vex4d v);
	void operator%=(vex4i v);

	vex3d operator|(vex3d v);
	vex3d operator|(vex2d v);
	vex3d operator|(vex2i v);
	vex3d operator|(vex2f v);
	vex3d operator|(vex3f v);
	vex3d operator|(vex3i v);
	vex3d operator|(vex4f v);
	vex3d operator|(vex4d v);
	vex3d operator|(vex4i v);

	void operator|=(vex2d v);
	void operator|=(vex2f v);
	void operator|=(vex2i v);
	void operator|=(vex3d v);
	void operator|=(vex3f v);
	void operator|=(vex3i v);
	void operator|=(vex4d v);
	void operator|=(vex4f v);
	void operator|=(vex4i v);

	void operator= (vex2d v);
	void operator= (vex2i v);
	void operator= (vex2f v);
	void operator= (vex3f v);
	void operator= (vex3i v);
	void operator= (vex4f v);
	void operator= (vex4d v);
	void operator= (vex4i v);

	vex3d operator+ (vex4f v);
	vex3d operator- (vex4f v);
	vex3d operator* (vex4f v);
	vex3d operator/ (vex4f v);
	vex3d operator+ (vex4d v);
	vex3d operator- (vex4d v);
	vex3d operator* (vex4d v);
	vex3d operator/ (vex4d v);
	vex3d operator+ (vex4i v);
	vex3d operator- (vex4i v);
	vex3d operator* (vex4i v);
	vex3d operator/ (vex4i v);
	vex3d operator+ (vex3i v);
	vex3d operator- (vex3i v);
	vex3d operator* (vex3i v);
	vex3d operator/ (vex3i v);
	vex3d operator+ (vex3f v);
	vex3d operator- (vex3f v);
	vex3d operator* (vex3f v);
	vex3d operator/ (vex3f v);
	vex3d operator+ (vex2f v);
	vex3d operator- (vex2f v);
	vex3d operator* (vex2f v);
	vex3d operator/ (vex2f v);
	vex3d operator+ (vex2i v);
	vex3d operator- (vex2i v);
	vex3d operator* (vex2i v);
	vex3d operator/ (vex2i v);
	vex3d operator+ (vex2d v);
	vex3d operator- (vex2d v);
	vex3d operator* (vex2d v);
	vex3d operator/ (vex2d v);
	vex3d operator+ (vex3d v);
	vex3d operator- (vex3d v);
	vex3d operator* (vex3d v);
	vex3d operator/ (vex3d v);

	vex3d operator+ (double v);
	vex3d operator- (double v);
	vex3d operator* (double v);
	vex3d operator/ (double v);
	void operator= (double v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (double v) { x += v; y += v; z += v; };
	void operator-= (double v) { x -= v; y -= v; z -= v; };
	void operator*= (double v) { x *= v; y *= v; z *= v; };
	void operator/= (double v) { x /= v; y /= v; z /= v; };
	void operator++ () { x += 1.0; y += 1.0; };
	void operator-- () { x -= 1.0; y -= 1.0; };

	bool operator== (vex3d v);
	bool operator== (double v);
	bool operator!= (vex3d v);
	bool operator!= (double v);
	bool operator< (vex3d v);
	bool operator< (double v);
	bool operator<= (vex3d v);
	bool operator<= (double v);
	bool operator> (vex3d  v);
	bool operator> (double v);
	bool operator>= (vex3d v);
	bool operator>= (double v);

	void normalize();
	void ceil_();
	void floor_();
	void abs_();
	void sqrt_();
	void percent_(float v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex3d v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void round_();
	void trunc_();
	void exp_();
	void cbrt_();

	vex3d ceil();
	vex3d floor();
	vex3d abs();
	vex3d sqrt();
	vex3d percent(float v);
	vex3d pow(int v);
	vex3d rand(int v2, int v3);
	vex3d atan2(vex3d v);
	vex3d atan();
	vex3d asin();
	vex3d acos();
	vex3d tan();
	vex3d sin();
	vex3d cos();
	vex3d average();
	vex3d log();
	vex3d round();
	vex3d trunc();
	vex3d exp();
	vex3d cbrt();

	bool isEmpty();
};
// ////////////////////// //
struct vex3b {
	bool x, y, z;
	vex3b();
	vex3b(bool v1, bool v2, bool v3);
	vex3b(bool v1, bool v2);
	vex3b(bool v1);
	void operator= (bool v);
	bool operator== (bool v) {
		if (x == v && y == v && z == v)
			return true;
		return false;
	};
};
vex3b::vex3b() {
	x = y = z = 0;
};
vex3b::vex3b(bool v1, bool v2, bool v3) {
	this->x = v1;
	this->y = v2;
	this->z = v3;
};
vex3b::vex3b(bool v1, bool v2) {
	this->x = v1;
	this->y = v2;
	this->z = 0;
};
vex3b::vex3b(bool v1) {
	this->x = v1;
	this->y = v1;
	this->z = v1;
};
void vex3b::operator=(bool v) {
	this->x = v;
	this->y = v;
	this->z = v;
};
// ////////////////////// //
struct vex3i {
	int x, y, z;
	vex3i();
	vex3i(int v1, int v2, int v3);
	vex3i(int v1, int v2);
	vex3i(int v1);
	vex3i(bool& v1, bool& v2, bool& v3) { x = std::atoi(v1); y = std::atoi(v2); z = std::atoi(v3); };
	vex3i(bool& v1, bool& v2) { x = std::atoi(v1); y = std::atoi(v2); };
	vex3i(bool& v1) { x = std::atoi(v1); y = std::atoi(v1); z = std::atoi(v1); };
	vex3i(std::string v1, std::string v2, std::string v3) { x = std::atoi(v1.c_str()); y = std::atoi(v2.c_str()); z = std::atoi(v3.c_str()); };
	vex3i(std::string v1, std::string v2) { x = std::atoi(v1.c_str()); y = std::atoi(v2.c_str()); };
	vex3i(std::string v1) { x = std::atoi(v1.c_str()); y = std::atoi(v1.c_str()); z = std::atoi(v1.c_str()); };
	vex3i(vex2d v);
	vex3i(vex2i v);
	vex3i(vex2f v);
	vex3i(vex3d v);
	vex3i(vex3f v);
	vex3i(vex4f v);
	vex3i(vex4d v);
	vex3i(vex4i v);

	vex3i(vex2f v, float v1);
	vex3i(float v1, vex2f v);
	vex3i(vex2d v, float v1);
	vex3i(float v1, vex2d v);
	vex3i(vex2i v, float v1);
	vex3i(float v1, vex2i v);

	vex3i(vex2f v, double v1);
	vex3i(double v1, vex2f v);
	vex3i(vex2d v, double v1);
	vex3i(double v1, vex2d v);
	vex3i(vex2i v, double v1);
	vex3i(double v1, vex2i v);

	vex3i(vex2f v, int v1);
	vex3i(int v1, vex2f v);
	vex3i(vex2d v, int v1);
	vex3i(int v1, vex2d v);
	vex3i(vex2i v, int v1);
	vex3i(int v1, vex2i v);

	vex2i xx() { return vex2i(x, x); };
	vex2i xy() { return vex2i(x, y); };
	vex2i xz() { return vex2i(x, z); };
	vex2i yx() { return vex2i(y, x); };
	vex2i yy() { return vex2i(y, y); };
	vex2i yz() { return vex2i(y, z); };
	vex2i zx() { return vex2i(z, x); };
	vex2i zy() { return vex2i(z, y); };
	vex2i zz() { return vex2i(z, z); };
	vex3i xxx() { return vex3i(x, x, x); };
	vex3i xxy() { return vex3i(x, x, y); };
	vex3i xxz() { return vex3i(x, x, z); };
	vex3i xyx() { return vex3i(x, y, x); };
	vex3i xyy() { return vex3i(x, y, y); };
	vex3i xyz() { return vex3i(x, y, z); };
	vex3i xzx() { return vex3i(x, z, x); };
	vex3i xzy() { return vex3i(x, z, y); };
	vex3i xzz() { return vex3i(x, z, z); };
	vex3i yxx() { return vex3i(y, x, x); };
	vex3i yxy() { return vex3i(y, x, y); };
	vex3i yxz() { return vex3i(y, x, z); };
	vex3i yyx() { return vex3i(y, y, x); };
	vex3i yyy() { return vex3i(y, y, y); };
	vex3i yyz() { return vex3i(y, y, z); };
	vex3i yzx() { return vex3i(y, z, x); };
	vex3i yzy() { return vex3i(y, z, y); };
	vex3i yzz() { return vex3i(y, z, z); };
	vex3i zxx() { return vex3i(z, x, x); };
	vex3i zxy() { return vex3i(z, x, y); };
	vex3i zxz() { return vex3i(z, x, z); };
	vex3i zyx() { return vex3i(z, y, x); };
	vex3i zyy() { return vex3i(z, y, y); };
	vex3i zyz() { return vex3i(z, y, z); };
	vex3i zzx() { return vex3i(z, z, x); };
	vex3i zzy() { return vex3i(z, z, y); };
	vex3i zzz() { return vex3i(z, z, z); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex3i operator()(const char* v) {
		if (strlen(v) == 2)
			return vex3i(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y);
		else
			return vex3i(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y, v[2] == 'x' ? x : y);
	};

	int& operator[](int v);
	int& operator[](std::string v);
	vex3i operator!();
	vex3i operator%(std::string v);
	vex3i operator%(int v);
	vex3i operator%(vex2f v);
	vex3i operator%(vex2d v);
	vex3i operator%(vex2i v);
	vex3i operator%(vex3f v);
	vex3i operator%(vex3d v);
	vex3i operator%(vex3i v);
	vex3i operator%(vex4f v);
	vex3i operator%(vex4d v);
	vex3i operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4f v);
	void operator%=(vex4d v);
	void operator%=(vex4i v);

	vex3i operator|(vex3i v);
	vex3i operator|(vex2d v);
	vex3i operator|(vex2i v);
	vex3i operator|(vex2f v);
	vex3i operator|(vex3f v);
	vex3i operator|(vex3d v);
	vex3i operator|(vex4f v);
	vex3i operator|(vex4d v);
	vex3i operator|(vex4i v);

	void operator|=(vex2i v);
	void operator|=(vex2f v);
	void operator|=(vex2d v);
	void operator|=(vex3i v);
	void operator|=(vex3f v);
	void operator|=(vex3d v);
	void operator|=(vex4i v);
	void operator|=(vex4f v);
	void operator|=(vex4d v);

	void operator= (vex2d v);
	void operator= (vex2i v);
	void operator= (vex2f v);
	void operator= (vex3d v);
	void operator= (vex3f v);
	void operator= (vex4f v);
	void operator= (vex4d v);
	void operator= (vex4i v);

	vex3i operator+ (vex4f v);
	vex3i operator- (vex4f v);
	vex3i operator* (vex4f v);
	vex3i operator/ (vex4f v);
	vex3i operator+ (vex4d v);
	vex3i operator- (vex4d v);
	vex3i operator* (vex4d v);
	vex3i operator/ (vex4d v);
	vex3i operator+ (vex4i v);
	vex3i operator- (vex4i v);
	vex3i operator* (vex4i v);
	vex3i operator/ (vex4i v);
	vex3i operator+ (vex3f v);
	vex3i operator- (vex3f v);
	vex3i operator* (vex3f v);
	vex3i operator/ (vex3f v);
	vex3i operator+ (vex3d v);
	vex3i operator- (vex3d v);
	vex3i operator* (vex3d v);
	vex3i operator/ (vex3d v);
	vex3i operator+ (vex2f v);
	vex3i operator- (vex2f v);
	vex3i operator* (vex2f v);
	vex3i operator/ (vex2f v);
	vex3i operator+ (vex2i v);
	vex3i operator- (vex2i v);
	vex3i operator* (vex2i v);
	vex3i operator/ (vex2i v);
	vex3i operator+ (vex2d v);
	vex3i operator- (vex2d v);
	vex3i operator* (vex2d v);
	vex3i operator/ (vex2d v);
	vex3i operator+ (vex3i v);
	vex3i operator- (vex3i v);
	vex3i operator* (vex3i v);
	vex3i operator/ (vex3i v);

	vex3i operator+ (int v);
	vex3i operator- (int v);
	vex3i operator* (int v);
	vex3i operator/ (int v);
	void operator= (int v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (int v) { x += v; y += v; z += v; };
	void operator-= (int v) { x -= v; y -= v; z -= v; };
	void operator*= (int v) { x *= v; y *= v; z *= v; };
	void operator/= (int v) { x /= v; y /= v; z /= v; };
	void operator++ () { x++; y++; };
	void operator-- () { x--; y--; };

	bool operator== (vex3i v);
	bool operator== (int v);
	bool operator!= (vex3i v);
	bool operator!= (int v);
	bool operator< (vex3i v);
	bool operator< (int v);
	bool operator<= (vex3i v);
	bool operator<= (int v);
	bool operator> (vex3i v);
	bool operator> (int v);
	bool operator>= (vex3i v);
	bool operator>= (int v);
	void log_();
	void exp_();
	void cbrt_();

	void normalize();
	void abs_();
	void sqrt_();
	void percent_(int v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex3i v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();

	vex3i abs();
	vex3i sqrt();
	vex3i percent(int v);
	vex3i pow(int v);
	vex3i rand(int v2, int v3);
	vex3i atan2(vex3i v);
	vex3i atan();
	vex3i asin();
	vex3i acos();
	vex3i tan();
	vex3i sin();
	vex3i cos();
	vex3i average();
	vex3i log();
	vex3i exp();
	vex3i cbrt();

	bool isEmpty();
};
// /////////////////////////////////// ///
struct vex3s {
	std::string x, y, z;
	vex3s();
	vex3s(std::string v1, std::string v2, std::string v3);
	vex3s operator+ (const vex3s& v);

	vex3s operator+ (const std::string v);
	void operator= (const std::string v);
	void operator+= (const vex3s& v);
};
vex3s::vex3s() {
	x = y = z = "";
};
vex3s::vex3s(std::string v1, std::string v2, std::string v3) {
	this->x = v1;
	this->y = v2;
	this->z = v3;
};
void vex3s::operator=(const std::string v) {
	this->x = v;
	this->y = v;
	this->z = v;
};
vex3s vex3s::operator+(const vex3s& v) {
	vex3s __temp;
	__temp.x = this->x + v.x;
	__temp.y = this->y + v.y;
	__temp.z = this->z + v.z;
	return __temp;
};
vex3s vex3s::operator+(const std::string v) {
	vex3s __temp;
	__temp.x = this->x + v;
	__temp.y = this->y + v;
	__temp.z = this->z + v;
	return __temp;
};
void vex3s::operator+=(const vex3s& v) {
	this->x += v.x;
	this->y += v.y;
	this->z += v.z;
};
struct vex2f {
	float x, y;
	vex2f();
	vex2f(float v1, float v2);
	vex2f(float v1);
	vex2f(bool& v1, bool& v2) { x = std::atof(v1); y = std::atof(v2); };
	vex2f(bool& v1) { x = std::atof(v1); y = std::atof(v1); };
	vex2f(std::string v1, std::string v2) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); };
	vex2f(std::string v1) { x = std::atof(v1.c_str()); y = std::atof(v1.c_str()); };
	vex2f(vex2d v);
	vex2f(vex2i v);
	vex2f(vex3f v);
	vex2f(vex3d v);
	vex2f(vex3i v);
	vex2f(vex4f v);
	vex2f(vex4d v);
	vex2f(vex4i v);
	
	//vex2f operator()() { return *this; };
	//operator bool() { return isEmpty(); };
	//operator std::string() { return str(x) + ' ' + str(y); };

	vex2f xx() { return vex2f(x, x); };
	vex2f xy() { return vex2f(x, y); };
	vex2f yy() { return vex2f(y, y); };
	vex2f yx() { return vex2f(y, x); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex2f operator()(const char* v) { return vex2f(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y); };

	float& operator[](int v);
	float& operator[](std::string v);
	vex2f operator!();
	vex2f operator%(std::string v);
	vex2f operator%(int v);
	vex2f operator%(float v);
	vex2f operator%(vex2f v);
	vex2f operator%(vex2d v);
	vex2f operator%(vex2i v);
	vex2f operator%(vex3f v);
	vex2f operator%(vex3d v);
	vex2f operator%(vex3i v);
	vex2f operator%(vex4f v);
	vex2f operator%(vex4d v);
	vex2f operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(float v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4f v);
	void operator%=(vex4d v);
	void operator%=(vex4i v);

	vex2f operator|(vex2f v);
	vex2f operator|(vex2d v);
	vex2f operator|(vex2i v);
	vex2f operator|(vex3f v);
	vex2f operator|(vex3d v);
	vex2f operator|(vex3i v);
	vex2f operator|(vex4f v);
	vex2f operator|(vex4d v);
	vex2f operator|(vex4i v);

	void operator|=(vex2f v);
	void operator|=(vex2d v);
	void operator|=(vex2i v);
	void operator|=(vex3f v);
	void operator|=(vex3d v);
	void operator|=(vex3i v);
	void operator|=(vex4f v);
	void operator|=(vex4d v);
	void operator|=(vex4i v);

	void operator= (vex2d v);
	void operator= (vex2i v);
	void operator= (vex3f v);
	void operator= (vex3d v);
	void operator= (vex3i v);
	void operator= (vex4f v);
	void operator= (vex4d v);
	void operator= (vex4i v);

	vex2f operator+ (vex4f v);
	vex2f operator- (vex4f v);
	vex2f operator* (vex4f v);
	vex2f operator/ (vex4f v);
	vex2f operator+ (vex4d v);
	vex2f operator- (vex4d v);
	vex2f operator* (vex4d v);
	vex2f operator/ (vex4d v);
	vex2f operator+ (vex4i v);
	vex2f operator- (vex4i v);
	vex2f operator* (vex4i v);
	vex2f operator/ (vex4i v);
	vex2f operator+ (vex3i v);
	vex2f operator- (vex3i v);
	vex2f operator* (vex3i v);
	vex2f operator/ (vex3i v);
	vex2f operator+ (vex3d v);
	vex2f operator- (vex3d v);
	vex2f operator* (vex3d v);
	vex2f operator/ (vex3d v);
	vex2f operator+ (vex3f v);
	vex2f operator- (vex3f v);
	vex2f operator* (vex3f v);
	vex2f operator/ (vex3f v);
	vex2f operator+ (vex2i v);
	vex2f operator- (vex2i v);
	vex2f operator* (vex2i v);
	vex2f operator/ (vex2i v);
	vex2f operator+ (vex2d v);
	vex2f operator- (vex2d v);
	vex2f operator* (vex2d v);
	vex2f operator/ (vex2d v);

	vex2f operator+ (vex2f v);
	vex2f operator- (vex2f v);
	vex2f operator* (vex2f v);
	vex2f operator/ (vex2f v);
	vex2f operator+ (float v);
	vex2f operator- (float v);
	vex2f operator* (float v);
	vex2f operator/ (float v);
	void operator= (float v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (float v) { x += v; y += v; };
	void operator-= (float v) { x -= v; y -= v; };
	void operator*= (float v) { x *= v; y *= v; };
	void operator/= (float v) { x /= v; y /= v; };
	void operator++ () { x += 1.0f; y += 1.0f; };
	void operator-- () { x -= 1.0f; y -= 1.0f; };

	bool operator== (vex2f v);
	bool operator== (float v);
	bool operator!= (vex2f v);
	bool operator!= (float v);
	bool operator< (vex2f v);
	bool operator< (float v);
	bool operator<= (vex2f v);
	bool operator<= (float v);
	bool operator> (vex2f v);
	bool operator> (float v);
	bool operator>= (vex2f v);
	bool operator>= (float v);

	void normalize();
	void ceil_();
	void floor_();
	void abs_();
	void sqrt_();
	void percent_(float v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex2f v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void round_();
	void trunc_();
	void exp_();
	void cbrt_();

	vex2f ceil();
	vex2f floor();
	vex2f abs();
	vex2f sqrt();
	vex2f percent(float v);
	vex2f pow(int v);
	vex2f rand(int v2, int v3);
	vex2f atan2(vex2f v);
	vex2f atan();
	vex2f asin();
	vex2f acos();
	vex2f tan();
	vex2f sin();
	vex2f cos();
	vex2f average();
	vex2f log();
	vex2f round();
	vex2f trunc();
	vex2f exp();
	vex2f cbrt();

	bool isEmpty();
};
// /////////////////////////// //
struct vex2d {
	double x, y;
	vex2d();
	vex2d(double v1, double v2);
	vex2d(double v1);
	vex2d(bool& v1, bool& v2) { x = std::atof(v1); y = std::atof(v2); };
	vex2d(bool& v1) { x = std::atof(v1); y = std::atof(v1); };
	vex2d(std::string v1, std::string v2) { x = std::atof(v1.c_str()); y = std::atof(v2.c_str()); };
	vex2d(std::string v1) { x = std::atof(v1.c_str()); y = std::atof(v1.c_str()); };
	vex2d(vex2f v);
	vex2d(vex2i v);
	vex2d(vex3f v);
	vex2d(vex3d v);
	vex2d(vex3i v);
	vex2d(vex4f v);
	vex2d(vex4d v);
	vex2d(vex4i v);

	vex2d xx() { return vex2d(x, x); };
	vex2d xy() { return vex2d(x, y); };
	vex2d yy() { return vex2d(y, y); };
	vex2d yx() { return vex2d(y, x); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex2d operator()(const char* v) { return vex2d(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y); };

	double& operator[](int v);
	double& operator[](std::string v);
	vex2d operator!();
	vex2d operator%(std::string v);
	vex2d operator%(int v);
	vex2d operator%(double v);
	vex2d operator%(vex2f v);
	vex2d operator%(vex2d v);
	vex2d operator%(vex2i v);
	vex2d operator%(vex3f v);
	vex2d operator%(vex3d v);
	vex2d operator%(vex3i v);
	vex2d operator%(vex4f v);
	vex2d operator%(vex4d v);
	vex2d operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(double v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4f v);
	void operator%=(vex4d v);
	void operator%=(vex4i v);

	vex2d operator|(vex2d v);
	vex2d operator|(vex2f v);
	vex2d operator|(vex2i v);
	vex2d operator|(vex3f v);
	vex2d operator|(vex3d v);
	vex2d operator|(vex3i v);
	vex2d operator|(vex4f v);
	vex2d operator|(vex4d v);
	vex2d operator|(vex4i v);

	void operator|=(vex2d v);
	void operator|=(vex2f v);
	void operator|=(vex2i v);
	void operator|=(vex3d v);
	void operator|=(vex3f v);
	void operator|=(vex3i v);
	void operator|=(vex4d v);
	void operator|=(vex4f v);
	void operator|=(vex4i v);

	void operator= (vex2f v);
	void operator= (vex2i v);
	void operator= (vex3f v);
	void operator= (vex3d v);
	void operator= (vex3i v);
	void operator= (vex4f v);
	void operator= (vex4d v);
	void operator= (vex4i v);

	vex2d operator+ (vex4f v);
	vex2d operator- (vex4f v);
	vex2d operator* (vex4f v);
	vex2d operator/ (vex4f v);
	vex2d operator+ (vex4d v);
	vex2d operator- (vex4d v);
	vex2d operator* (vex4d v);
	vex2d operator/ (vex4d v);
	vex2d operator+ (vex4i v);
	vex2d operator- (vex4i v);
	vex2d operator* (vex4i v);
	vex2d operator/ (vex4i v);
	vex2d operator+ (vex3i v);
	vex2d operator- (vex3i v);
	vex2d operator* (vex3i v);
	vex2d operator/ (vex3i v);
	vex2d operator+ (vex3d v);
	vex2d operator- (vex3d v);
	vex2d operator* (vex3d v);
	vex2d operator/ (vex3d v);
	vex2d operator+ (vex3f v);
	vex2d operator- (vex3f v);
	vex2d operator* (vex3f v);
	vex2d operator/ (vex3f v);
	vex2d operator+ (vex2i v);
	vex2d operator- (vex2i v);
	vex2d operator* (vex2i v);
	vex2d operator/ (vex2i v);
	vex2d operator+ (vex2f v);
	vex2d operator- (vex2f v);
	vex2d operator* (vex2f v);
	vex2d operator/ (vex2f v);

	vex2d operator+ (vex2d v);
	vex2d operator- (vex2d v);
	vex2d operator* (vex2d v);
	vex2d operator/ (vex2d v);
	vex2d operator+ (double v);
	vex2d operator- (double v);
	vex2d operator* (double v);
	vex2d operator/ (double v);
	void operator= (double v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);

	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);
	void operator+= (double v) { x += v; y += v; };
	void operator-= (double v) { x -= v; y -= v; };
	void operator*= (double v) { x *= v; y *= v; };
	void operator/= (double v) { x /= v; y /= v; };
	void operator++ () { x += 1.0; y += 1.0; };
	void operator-- () { x -= 1.0; y -= 1.0; };

	bool operator== (vex2d v);
	bool operator== (double v);
	bool operator!= (vex2d v);
	bool operator!= (double v);
	bool operator< (vex2d v);
	bool operator< (double v);
	bool operator<= (vex2d v);
	bool operator<= (double v);
	bool operator> (vex2d  v);
	bool operator> (double v);
	bool operator>= (vex2d v);
	bool operator>= (double v);

	void normalize();
	void ceil_();
	void floor_();
	void abs_();
	void sqrt_();
	void percent_(float v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex2d v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void round_();
	void trunc_();
	void exp_();
	void cbrt_();

	vex2d ceil();
	vex2d floor();
	vex2d abs();
	vex2d sqrt();
	vex2d percent(float v);
	vex2d pow(int v);
	vex2d rand(int v2, int v3);
	vex2d atan2(vex2d v);
	vex2d atan();
	vex2d asin();
	vex2d acos();
	vex2d tan();
	vex2d sin();
	vex2d cos();
	vex2d average();
	vex2d log();
	vex2d round();
	vex2d trunc();
	vex2d exp();
	vex2d cbrt();

	bool isEmpty();
};
// ////////////////////// //
struct vex2b {
	bool x, y;
	vex2b();
	vex2b(bool v1, bool v2);
	vex2b(bool v1);
	void operator= (bool v);

	vex2b(int& v1, int& v2);
	vex2b(int& v1);
	vex2b(vex3b v1);
	vex2b(vex4b v1);
	bool operator==(bool v);
	bool operator==(vex3b v);
	bool operator==(vex4b v);
	bool operator!=(bool v);
	bool operator!=(vex2b v);
	bool operator!=(vex3b v);
	bool operator!=(vex4b v);
	void operator|=(bool v);
	void operator|=(vex2b v);
	void operator|=(vex3b v);
	void operator|=(vex4b v);
	vex2b operator!();
	bool operator[](int v);
	bool operator[](size_t& v);
};
vex2b::vex2b() {
	x = y = 0;
};
vex2b::vex2b(bool v1, bool v2) {
	this->x = v1;
	this->y = v2;
};
vex2b::vex2b(bool v1) {
	this->x = v1;
	this->y = v1;
};
void vex2b::operator=(bool v) {
	this->x = v;
	this->y = v;
};
// ////////////////////// //
struct vex2i {
	int x, y;
	vex2i();
	vex2i(int v1, int v2);
	vex2i(int v1);
	vex2i(bool& v1, bool& v2) { x = std::atoi(v1); y = std::atoi(v2); };
	vex2i(bool& v1) { x = std::atoi(v1); y = std::atoi(v1); };
	vex2i(std::string v1, std::string v2) { x = std::atoi(v1.c_str()); y = std::atoi(v2.c_str()); };
	vex2i(std::string v1) { x = std::atoi(v1.c_str()); y = std::atoi(v1.c_str()); };
	vex2i(vex2f v);
	vex2i(vex2d v);
	vex2i(vex3f v);
	vex2i(vex3d v);
	vex2i(vex3i v);
	vex2i(vex4f v);
	vex2i(vex4d v);
	vex2i(vex4i v);

	vex2i xx() { return vex2i(x, x); };
	vex2i xy() { return vex2i(x, y); };
	vex2i yy() { return vex2i(y, y); };
	vex2i yx() { return vex2i(y, x); };

	void operator()(vex2f& v);
	void operator()(vex2d& v);
	void operator()(vex2i& v);
	void operator()(vex3f& v);
	void operator()(vex3d& v);
	void operator()(vex3i& v);
	void operator()(vex4f& v);
	void operator()(vex4d& v);
	void operator()(vex4i& v);
	vex2i operator()(const char* v) { return vex2i(v[0] == 'x' ? x : y, v[1] == 'x' ? x : y); };

	int& operator[](int v);
	int& operator[](std::string v);
	vex2i operator!();
	vex2i operator%(std::string v);
	vex2i operator%(int v);
	vex2i operator%(vex2f v);
	vex2i operator%(vex2d v);
	vex2i operator%(vex2i v);
	vex2i operator%(vex3f v);
	vex2i operator%(vex3d v);
	vex2i operator%(vex3i v);
	vex2i operator%(vex4f v);
	vex2i operator%(vex4d v);
	vex2i operator%(vex4i v);

	void operator%=(std::string v);
	void operator%=(int v);
	void operator%=(vex2f v);
	void operator%=(vex2d v);
	void operator%=(vex2i v);
	void operator%=(vex3f v);
	void operator%=(vex3d v);
	void operator%=(vex3i v);
	void operator%=(vex4f v);
	void operator%=(vex4d v);
	void operator%=(vex4i v);

	vex2i operator|(vex2i v);
	vex2i operator|(vex2d v);
	vex2i operator|(vex2f v);
	vex2i operator|(vex3f v);
	vex2i operator|(vex3d v);
	vex2i operator|(vex3i v);
	vex2i operator|(vex4f v);
	vex2i operator|(vex4d v);
	vex2i operator|(vex4i v);

	void operator|=(vex2i v);
	void operator|=(vex2d v);
	void operator|=(vex2f v);
	void operator|=(vex3i v);
	void operator|=(vex3d v);
	void operator|=(vex3f v);
	void operator|=(vex4i v);
	void operator|=(vex4d v);
	void operator|=(vex4f v);

	void operator= (vex2d v);
	void operator= (vex2f v);
	void operator= (vex3f v);
	void operator= (vex3d v);
	void operator= (vex3i v);
	void operator= (vex4f v);
	void operator= (vex4d v);
	void operator= (vex4i v);

	vex2i operator+ (vex4f v);
	vex2i operator- (vex4f v);
	vex2i operator* (vex4f v);
	vex2i operator/ (vex4f v);
	vex2i operator+ (vex4d v);
	vex2i operator- (vex4d v);
	vex2i operator* (vex4d v);
	vex2i operator/ (vex4d v);
	vex2i operator+ (vex4i v);
	vex2i operator- (vex4i v);
	vex2i operator* (vex4i v);
	vex2i operator/ (vex4i v);
	vex2i operator+ (vex3i v);
	vex2i operator- (vex3i v);
	vex2i operator* (vex3i v);
	vex2i operator/ (vex3i v);
	vex2i operator+ (vex3d v);
	vex2i operator- (vex3d v);
	vex2i operator* (vex3d v);
	vex2i operator/ (vex3d v);
	vex2i operator+ (vex3f v);
	vex2i operator- (vex3f v);
	vex2i operator* (vex3f v);
	vex2i operator/ (vex3f v);
	vex2i operator+ (vex2d v);
	vex2i operator- (vex2d v);
	vex2i operator* (vex2d v);
	vex2i operator/ (vex2d v);
	vex2i operator+ (vex2f v);
	vex2i operator- (vex2f v);
	vex2i operator* (vex2f v);
	vex2i operator/ (vex2f v);

	vex2i operator+ (vex2i v);
	vex2i operator- (vex2i v);
	vex2i operator* (vex2i v);
	vex2i operator/ (vex2i v);
	vex2i operator+ (int v);
	vex2i operator- (int v);
	vex2i operator* (int v);
	vex2i operator/ (int v);
	void operator= (int v);

	void operator+= (vex4d v);
	void operator-= (vex4d v);
	void operator*= (vex4d v);
	void operator/= (vex4d v);
	void operator+= (vex4i v);
	void operator-= (vex4i v);
	void operator*= (vex4i v);
	void operator/= (vex4i v);
	void operator+= (vex4f v);
	void operator-= (vex4f v);
	void operator*= (vex4f v);
	void operator/= (vex4f v);
	void operator+= (vex3i v);
	void operator-= (vex3i v);
	void operator*= (vex3i v);
	void operator/= (vex3i v);
	void operator+= (vex3d v);
	void operator-= (vex3d v);
	void operator*= (vex3d v);
	void operator/= (vex3d v);
	void operator+= (vex3f v);
	void operator-= (vex3f v);
	void operator*= (vex3f v);
	void operator/= (vex3f v);
	void operator+= (vex2f v);
	void operator-= (vex2f v);
	void operator*= (vex2f v);
	void operator/= (vex2f v);
	void operator+= (vex2d v);
	void operator-= (vex2d v);
	void operator*= (vex2d v);
	void operator/= (vex2d v);

	void operator+= (vex2i v);
	void operator-= (vex2i v);
	void operator*= (vex2i v);
	void operator/= (vex2i v);
	void operator+= (int v) { x += v; y += v; };
	void operator-= (int v) { x -= v; y -= v; };
	void operator*= (int v) { x *= v; y *= v; };
	void operator/= (int v) { x /= v; y /= v; };
	void operator++ () { x++; y++; };
	void operator-- () { x--; y--; };

	bool operator== (vex2i v);
	bool operator== (int v);
	bool operator!= (vex2i v);
	bool operator!= (int v);
	bool operator< (vex2i v);
	bool operator< (int v);
	bool operator<= (vex2i v);
	bool operator<= (int v);
	bool operator> (vex2i v);
	bool operator> (int v);
	bool operator>= (vex2i v);
	bool operator>= (int v);

	void normalize();
	void abs_();
	void sqrt_();
	void percent_(int v);
	void pow_(int v);
	void rand_(int v2, int v3);
	void atan2_(vex2i v);
	void atan_();
	void asin_();
	void acos_();
	void tan_();
	void sin_();
	void cos_();
	void average_();
	void log_();
	void exp_();
	void cbrt_();

	vex2i abs();
	vex2i sqrt();
	vex2i percent(int v);
	vex2i pow(int v);
	vex2i rand(int v2, int v3);
	vex2i atan2(vex2i v);
	vex2i atan();
	vex2i asin();
	vex2i acos();
	vex2i tan();
	vex2i sin();
	vex2i cos();
	vex2i average();
	vex2i log();
	vex2i exp();
	vex2i cbrt();

	bool isEmpty();
};
// ///////////////////////////// //
struct vex2s {
	std::string x, y;
	vex2s();
	vex2s(std::string v1, std::string v2);
	vex2s operator+ (const vex2s& v);

	vex2s operator+ (const std::string v);
	void operator= (const std::string v);
	void operator= (const vex2s& v);
	void operator+= (const vex2s& v);
};
vex2s::vex2s() {
	x = y = "";
};
vex2s::vex2s(std::string v1, std::string v2) {
	this->x = v1;
	this->y = v2;
};
void vex2s::operator=(const std::string v) {
	this->x = v;
	this->y = v;
};
void vex2s::operator=(const vex2s& v) {
	this->x = v.x;
	this->y = v.y;
};
vex2s vex2s::operator+(const vex2s& v) {
	vex2s __temp;
	__temp.x = this->x + v.x;
	__temp.y = this->y + v.y;
	return __temp;
};
vex2s vex2s::operator+(const std::string v) {
	vex2s __temp;
	__temp.x = this->x + v;
	__temp.y = this->y + v;
	return __temp;
};
void vex2s::operator+=(const vex2s& v) {
	this->x += v.x;
	this->y += v.y;
};